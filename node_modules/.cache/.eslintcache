[{"F:\\Farmers_Marketplace1\\src\\index.js":"1","F:\\Farmers_Marketplace1\\src\\serviceWorker.js":"2","F:\\Farmers_Marketplace1\\src\\components\\App.js":"3","F:\\Farmers_Marketplace1\\src\\components\\Farmer\\Farmer.js":"4","F:\\Farmers_Marketplace1\\src\\components\\Login\\Login.js":"5","F:\\Farmers_Marketplace1\\src\\components\\Main\\Main.js":"6","F:\\Farmers_Marketplace1\\src\\components\\QtLogin\\QtLogin.js":"7","F:\\Farmers_Marketplace1\\src\\components\\Register\\Register.js":"8","F:\\Farmers_Marketplace1\\src\\components\\Navbar\\Navbar.js":"9","F:\\Farmers_Marketplace1\\src\\components\\QtRegister\\QtRegister.js":"10","F:\\Farmers_Marketplace1\\src\\components\\QTesting\\QTesting.js":"11"},{"size":517,"mtime":1729323962727,"results":"12","hashOfConfig":"13"},{"size":5086,"mtime":1729318534315,"results":"14","hashOfConfig":"13"},{"size":10100,"mtime":1729326257459,"results":"15","hashOfConfig":"13"},{"size":4225,"mtime":1729318534310,"results":"16","hashOfConfig":"13"},{"size":3161,"mtime":1729324709199,"results":"17","hashOfConfig":"13"},{"size":740,"mtime":1729326619502,"results":"18","hashOfConfig":"13"},{"size":3076,"mtime":1729318675800,"results":"19","hashOfConfig":"13"},{"size":3671,"mtime":1729320418594,"results":"20","hashOfConfig":"13"},{"size":1428,"mtime":1729318534311,"results":"21","hashOfConfig":"13"},{"size":2558,"mtime":1729318534313,"results":"22","hashOfConfig":"13"},{"size":4993,"mtime":1729318534312,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"sfprp",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"F:\\Farmers_Marketplace1\\src\\index.js",[],["52","53"],"F:\\Farmers_Marketplace1\\src\\serviceWorker.js",[],"F:\\Farmers_Marketplace1\\src\\components\\App.js",["54","55","56","57","58","59","60","61","62","63","64","65"],"import React, { useState , Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Web3 from 'web3'\r\nimport './App.css';\r\nimport Marketplace from '../abis/Marketplace.json'\r\nimport Navbar from './Navbar/Navbar'\r\nimport QTesting from './QTesting/QTesting'\r\nimport Main from './Main/Main'\r\nimport Farmer from './Farmer/Farmer'\r\nimport Register from './Register/Register'\r\nimport Login from './Login/Login';\r\nimport QtLogin from './QtLogin/QtLogin';\r\nimport QtRegister from './QtRegister/QtRegister'\r\n\r\nclass App extends Component {\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      try {\r\n        // Use Ganache's RPC URL to connect MetaMask (or another provider) to Ganache\r\n        window.web3 = new Web3(window.ethereum);\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n      } catch (error) {\r\n        console.error(\"User denied account access\");\r\n      }\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      // Ensure you are connecting to Ganache in case MetaMask is not available\r\n      window.web3 = new Web3(new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\")); // Connect directly to Ganache\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    const networkId = await web3.eth.net.getId()\r\n    console.log(networkId)\r\n    const networkData = Marketplace.networks[networkId]\r\n    if(networkData) {\r\n      const marketplace = new web3.eth.Contract(Marketplace.abi, networkData.address)\r\n      this.setState({ marketplace })\r\n      const productCount = await marketplace.methods.productCount().call()\r\n      const farmerCount = await marketplace.methods.farmerCount().call()\r\n      const qtCount = await marketplace.methods.qtCount().call()\r\n      this.setState({ productCount })\r\n      this.setState({ farmerCount })\r\n      this.setState({ qtCount })\r\n      // Load products\r\n      for (var i = 1; i <= productCount; i++) {\r\n        const product = await marketplace.methods.products(i).call()\r\n        this.setState({\r\n          products: [...this.state.products, product]\r\n        })\r\n      }\r\n      //Load farmers\r\n      for (var i = 1; i <= farmerCount; i++) {\r\n        const farmer = await marketplace.methods.farmers(i).call()\r\n        this.setState({\r\n          farmers: [...this.state.farmers, farmer]\r\n        })\r\n      }\r\n      //Load qt\r\n      for (var i = 1; i <= qtCount; i++) {\r\n        const qtesting = await marketplace.methods.qtestings(i).call()\r\n        this.setState({\r\n          qtestings: [...this.state.qtestings, qtesting]\r\n        })\r\n      }\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('Marketplace contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      productCount: 0,\r\n      farmerCount: 0,\r\n      qtCount: 0,\r\n      farmers: [],\r\n      products: [],\r\n      qtestings: [],\r\n      loading: true\r\n    }\r\n\r\n    this.createProduct = this.createProduct.bind(this)\r\n    this.purchaseProduct = this.purchaseProduct.bind(this)\r\n    this.farmerRegister = this.farmerRegister.bind(this)\r\n    this.qtestingRegister = this.qtestingRegister.bind(this)\r\n    this.qtapproval = this.qtapproval.bind(this)\r\n  }\r\n\r\n  createProduct(id, name, price, city) {\r\n    this.setState({ loading: true })\r\n    this.state.marketplace.methods.createProduct(id, name, price, city).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n  purchaseProduct(id, price) {\r\n    this.setState({ loading: true })\r\n    this.state.marketplace.methods.purchaseProduct(id).send({ from: this.state.account, value: price })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n  farmerRegister(name, phone, city){\r\n    this.setState({loading: true})\r\n    this.state.marketplace.methods.farmerRegister(name, phone, city).send({from: this.state.account})\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n  qtestingRegister(name, city){\r\n    this.setState({loading: true})\r\n    this.state.marketplace.methods.qtestingRegister(name, city).send({from: this.state.account})\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n  qtapproval(id, price){\r\n    this.setState({ loading: true })\r\n    this.state.marketplace.methods.qtapproval(id, price).send({ from: this.state.account})\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <Navbar account={this.state.account} /> */}\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <Router>\r\n              <Switch>\r\n                <Route path=\"/\" exact component={() => <main role=\"main\" className=\"col-lg-12 d-flex\">\r\n                  { this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<Main\r\n                  products={this.state.products}\r\n                  createProduct={this.createProduct}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n          \r\n               <Route path=\"/Farmer\" exact component={() => <main role=\"farmer\" className=\"col-lg-12 d-flex\">\r\n                  { this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<Farmer\r\n                  products={this.state.products}\r\n                  createProduct={this.createProduct}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n\r\n                  <Route path=\"/User\" exact component={() => <main role=\"User\" className=\"col-lg-12 d-flex\">\r\n                  { this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<Farmer\r\n                  products={this.state.products}\r\n                  createProduct={this.createProduct}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n                  \r\n                  \r\n                  <Route path=\"/Admin\" exact component={() => <main role=\"Admin\" className=\"col-lg-12 d-flex\">\r\n                  { this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<Farmer\r\n                  products={this.state.products}\r\n                  createProduct={this.createProduct}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n                  \r\n                  \r\n                <Route path=\"/QTesting\" exact component={() => <main role=\"Quality Testing\" className=\"col-lg-12 d-flex\">\r\n                  {this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<QTesting\r\n                  products={this.state.products}\r\n                  qtapproval={this.qtapproval}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n\r\n                <Route path=\"/Login\" exact component={() => <main role=\"Quality Testing\" className=\"col-lg-12 d-flex\">\r\n                  {this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<Login\r\n                  products={this.state.products}\r\n                  farmers={this.state.farmers}\r\n                  createProduct={this.createProduct}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n\r\n                <Route path=\"/QtLogin\" exact component={() => <main role=\"Quality Testing\" className=\"col-lg-12 d-flex\">\r\n                  {this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<QtLogin\r\n                  products={this.state.products}\r\n                  farmers={this.state.farmers}\r\n                  qtestings={this.state.qtestings}\r\n                  createProduct={this.createProduct}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n\r\n                <Route path=\"/Register\" exact component={() => <main role=\"Quality Testing\" className=\"col-lg-12 d-flex\">\r\n                  {this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<Register\r\n                  farmers={this.state.farmers}\r\n                  farmerRegister={this.farmerRegister}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n\r\n                <Route path=\"/QtRegister\" exact component={() => <main role=\"Quality Testing\" className=\"col-lg-12 d-flex\">\r\n                  {this.state.loading\r\n                  ?<div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                  :<QtRegister\r\n                  qtestings={this.state.qtestings}\r\n                  qtestingRegister={this.qtestingRegister}\r\n                  purchaseProduct={this.purchaseProduct} />\r\n                  }\r\n                  </main>} />\r\n\r\n              </Switch>\r\n            </Router>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","F:\\Farmers_Marketplace1\\src\\components\\Farmer\\Farmer.js",["66","67","68","69"],"import React, { Component  } from 'react';\r\nimport { Redirect, Switch, Route, Link } from \"react-router-dom\";\r\n\r\n\r\nclass Farmer extends Component{\r\n\r\n  \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 'Dharwad',\r\n      islogout: false\r\n    };\r\n  }\r\n\r\n  handleChange = (event) =>\r\n    this.setState({value: event.target.value});\r\n\r\n    signOut = () => {\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"session\");\r\n      this.setState({\r\n        islogout: true\r\n      });\r\n    };\r\n\r\n    render() {\r\n      if (!localStorage.getItem(\"token\")) {\r\n        return <Redirect to=\"/Login\" />;\r\n      }\r\n      if (this.state.islogout) {\r\n        return <Redirect to=\"/Login\" />;\r\n      }\r\n        return (\r\n          <div id=\"content\">\r\n            <button onClick={this.signOut} href=\"#\">\r\n              Sign Out\r\n            </button>\r\n            <h1>Add Product</h1>\r\n            <form onSubmit={(event) => {\r\n              event.preventDefault()\r\n              const id = localStorage.getItem(\"session\")\r\n              const name = this.productName.value\r\n              const city = this.state.value\r\n              const price = window.web3.utils.toWei(this.productPrice.value.toString(), 'Ether')\r\n              this.props.createProduct(id,name, price, city)\r\n            }}>\r\n              <div className=\"form-group mr-sm-2\">\r\n                <input\r\n                  id=\"productName\"\r\n                  type=\"text\"\r\n                  ref={(input) => { this.productName = input }}\r\n                  className=\"form-control\"\r\n                  placeholder=\"Product Name\"\r\n                  required />\r\n              </div>\r\n              <div className=\"form-group mr-sm-2\">\r\n                <input\r\n                  id=\"productPrice\"\r\n                  type=\"text\"\r\n                  ref={(input) => { this.productPrice = input }}\r\n                  className=\"form-control\"\r\n                  placeholder=\"Product Price\"\r\n                  required />\r\n              </div>\r\n                  <form>\r\n                  <label>Select City:  </label>\r\n                  <select value={this.state.value1} onChange={this.handleChange}>\r\n\t\t    <option value=\"Dharwad\">Dharwad</option>\r\n\t\t    <option value=\"Haliyal\">Haliyal</option>\r\n  \t\t  <option value=\"Dandeli\">Dandeli</option>\r\n\t    \t</select>\r\n                  {/* <select >\r\n                  <option value=\"Dharwad\" ref={(value) => { this.productCity = value }}>Dharwad</option>\r\n                  <option value=\"Haliyal\" ref={(value) => { this.productCity = value }}>Haliyal</option>\r\n                  <option value=\"Dandeli\" ref={(value) => { this.productCity = value }}>Dandeli</option>\r\n                </select> */}\r\n                </form>\r\n              <button type=\"submit\" className=\"btn btn-primary\">Add Product</button>\r\n            </form>\r\n            <p>&nbsp;</p>\r\n            <h2>Product List</h2>\r\n            <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Product ID</th>\r\n            <th scope=\"col\">Farmer ID</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Price</th>\r\n            <th scope=\"col\">Owner</th>\r\n            <th scope=\"col\">City</th>\r\n            <th scope=\"col\">Is this sold</th>\r\n            <th scope=\"col\">Quality approved</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody id=\"productList\">\r\n          { this.props.products.map((product, key) => {\r\n            return(product.farmerID.toString()==localStorage.getItem(\"session\")\r\n              ?\r\n              <tr key={key}>\r\n                <th scope=\"row\">{product.id.toString()}</th>\r\n                <th scope=\"roe\">{product.farmerID.toString()}</th>\r\n                <td>{product.name}</td>\r\n                <td>{window.web3.utils.fromWei(product.price.toString(), 'Ether')} Eth</td>\r\n                <td>{product.owner}</td>\r\n                <td>{product.city}</td>\r\n                <td>{product.purchased.toString()}</td>\r\n                <td>{product.approved.toString()}</td>\r\n              </tr>\r\n              :null)\r\n          })}\r\n        </tbody>\r\n      </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n    \r\n\r\n}\r\n\r\nexport default Farmer;","F:\\Farmers_Marketplace1\\src\\components\\Login\\Login.js",[],"F:\\Farmers_Marketplace1\\src\\components\\Main\\Main.js",[],"F:\\Farmers_Marketplace1\\src\\components\\QtLogin\\QtLogin.js",["70"],"import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass QtLogin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      islogged: false,\r\n      loginParams: {\r\n        user_id: \"\",\r\n        user_password: \"\"\r\n      },\r\n      errorMsg: \"\"\r\n    };\r\n  }\r\n\r\n  handleFormChange = event => {\r\n    let loginParamsNew = { ...this.state.loginParams };\r\n    let val = event.target.value;\r\n    loginParamsNew[event.target.name] = val;\r\n    this.setState({\r\n      loginParams: loginParamsNew\r\n    });\r\n  };\r\n\r\n  login = () => {\r\n    let user_id = this.state.loginParams.user_id;\r\n    let user_password = this.state.loginParams.user_password;\r\n\r\n    // Store session token and user ID\r\n    localStorage.setItem(\"qtoken\", \"T\");\r\n    localStorage.setItem(\"qsession\", user_id);\r\n\r\n    console.log(localStorage.getItem(\"qtoken\"));\r\n    console.log(localStorage.getItem(\"qsession\"));\r\n\r\n    this.setState({\r\n      islogged: true\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    \r\n    const { user_id, user_password } = this.state.loginParams;\r\n    const matchedQtUser = this.props.qtestings.find(\r\n      (qtesting) => qtesting.name === user_id && qtesting.city === user_password\r\n    );\r\n\r\n    if (matchedQtUser) {\r\n      this.login();\r\n    } else {\r\n      this.setState({ errorMsg: \"Invalid name or city\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (localStorage.getItem(\"qtoken\")) {\r\n      return <Redirect to=\"/QTesting\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"form-signin\">\r\n          <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <div className=\"form-group mr-sm-2\">\r\n                <input\r\n                  id=\"FarmerID\"\r\n                  name=\"user_id\"\r\n                  type=\"text\"\r\n                  ref={(input) => { this.FarmerID = input }}\r\n                  onChange={this.handleFormChange}\r\n                  className=\"form-control\"\r\n                  placeholder=\"name\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"form-group mr-sm-2\">\r\n                <input\r\n                  id=\"FarmerID\"\r\n                  name=\"user_password\"\r\n                  type=\"password\"\r\n                  ref={(input) => { this.PhoneNo = input }}\r\n                  onChange={this.handleFormChange}\r\n                  className=\"form-control\"\r\n                  placeholder=\"city\"\r\n                  required\r\n                />\r\n              </div>\r\n              <button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.errorMsg && (\r\n            <div className=\"alert alert-danger mt-2\">{this.state.errorMsg}</div>\r\n          )}\r\n        </form>\r\n\r\n        <p>Don't have Account..? <a href=\"/QtRegister\">Click here</a></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QtLogin;\r\n","F:\\Farmers_Marketplace1\\src\\components\\Register\\Register.js",[],"F:\\Farmers_Marketplace1\\src\\components\\Navbar\\Navbar.js",[],"F:\\Farmers_Marketplace1\\src\\components\\QtRegister\\QtRegister.js",["71","72","73"],"import React, { Component  } from 'react';\r\nimport { Redirect, Switch, Route, Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nclass QtRegister extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 'Dharwad'};\r\n  }\r\n\r\n  handleChange = (event) =>\r\n    this.setState({value: event.target.value});\r\n\r\n    render() {\r\n      if (localStorage.getItem(\"qtoken\")) {\r\n        return <Redirect to=\"/QTesting\" />;\r\n      }\r\n        return (\r\n          <div id=\"content\">\r\n            <h1>Qt Register</h1>\r\n            <form onSubmit={(event) => {\r\n              event.preventDefault()\r\n              const name = this.qtName.value\r\n              const city = this.state.value\r\n              this.props.qtestingRegister(name, city)\r\n            }}>\r\n              <div className=\"form-group mr-sm-2\">\r\n                <input\r\n                  id=\"qtName\"\r\n                  type=\"text\"\r\n                  ref={(input) => { this.qtName = input }}\r\n                  className=\"form-control\"\r\n                  placeholder=\"Name\"\r\n                  required />\r\n              </div>\r\n                  <form>\r\n                  <label>Select City:  </label>\r\n                  <select value={this.state.value1} onChange={this.handleChange}>\r\n\t\t    <option value=\"Dharwad\">Dharwad</option>\r\n\t\t    <option value=\"Haliyal\">Haliyal</option>\r\n  \t\t  <option value=\"Dandeli\">Dandeli</option>\r\n\t    \t</select>\r\n                </form>\r\n              <button type=\"submit\" className=\"btn btn-primary\">Register</button>\r\n            </form>\r\n            <p>&nbsp;</p>\r\n            {/* {this.props.qtestings.map((qtesting, key) => {\r\n                return(\r\n                  <p>Your Register ID is {qtesting.id}</p>\r\n                  )\r\n              })} */}\r\n \r\n            {/* <h2>Buy Product</h2>\r\n\t\t    <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">#</th>\r\n              <th scope=\"col\">Name</th>\r\n              <th scope=\"col\">City</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody id=\"productList\">\r\n            { this.props.qtestings.map((qtesting, key) => {\r\n              return(\r\n                <tr key={key}>\r\n                  <th scope=\"row\">{qtesting.id.toString()}</th>\r\n                  <td>{qtesting.name}</td>\r\n                  <td>{qtesting.city}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>  */}\r\n<p>Login <a href=\"/QtLogin\">Click here</a></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QtRegister;","F:\\Farmers_Marketplace1\\src\\components\\QTesting\\QTesting.js",["74","75","76","77","78","79","80"],"import React, { Component  } from 'react';\r\nimport { Redirect, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nclass QTesting extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 'Dharwad',\r\n      islogout: false\r\n    };\r\n  }\r\n\r\n  handleChange = (event) =>\r\n    this.setState({value: event.target.value});\r\n\r\n    signOut = () => {\r\n      localStorage.removeItem(\"qtoken\");\r\n      localStorage.removeItem(\"qsession\");\r\n      this.setState({\r\n        islogout: true\r\n      });\r\n    };\r\n\r\n    render() {\r\n      if (!localStorage.getItem(\"qtoken\")) {\r\n        return <Redirect to=\"/QtLogin\" />;\r\n      }\r\n      if (this.state.islogout) {\r\n        return <Redirect to=\"/QtLogin\" />;\r\n      }\r\n      return (\r\n      <div id=\"content\">\r\n        <button onClick={this.signOut} href=\"#\">\r\n              Sign Out\r\n            </button>\r\n      <form onSubmit={(event) => {\r\n        event.preventDefault()\r\n        const id = this.productID.value\r\n        const price = window.web3.utils.toWei(this.productPrice.value.toString(), 'Ether')\r\n        this.props.qtapproval(id, price)\r\n        }}>\r\n        <div className=\"form-group mr-sm-2\">\r\n          <input\r\n            id=\"productID\"\r\n            type=\"text\"\r\n            ref={(input) => { this.productID = input }}\r\n            placeholder=\"Enter the Product ID\"\r\n            required />\r\n          <a>&nbsp;</a>\r\n          <input\r\n            id=\"productName\"\r\n            type=\"text\"\r\n            ref={(input) => { this.productPrice = input }}          \r\n            placeholder=\"Approved Price\"\r\n            required />\r\n          <a>&nbsp;</a>\r\n          <button type=\"submit\" className=\"btn btn-primary\">approve Product</button>\r\n        </div>\r\n      </form>\r\n      <form>\r\n  \t\t  <label>Select City:  </label>\r\n\t  \t  <select value={this.state.value1} onChange={this.handleChange}>\r\n\t\t      <option value=\"Dharwad\">Dharwad</option>\r\n\t  \t    <option value=\"Haliyal\">Haliyal</option>\r\n  \t  \t  <option value=\"Dandeli\">Dandeli</option>\r\n\t    \t</select>\r\n        {/* <div className=\"form-group mr-sm-2\">\r\n          <input\r\n            id=\"productID\"\r\n            type=\"text\"\r\n            ref={(input) => { this.productId = input }}\r\n            placeholder=\"Enter the Farmer ID\"\r\n            required />\r\n          <a>&nbsp;</a>\r\n          <a>&nbsp;</a>\r\n          <button type=\"submit\" className=\"btn btn-primary\">Search</button>\r\n        </div> */}\r\n\t    </form>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Product ID</th>\r\n            <th scope=\"col\">Farmer ID</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Price</th>\r\n            <th scope=\"col\">Owner</th>\r\n            <th scope=\"col\">City</th>\r\n            <th scope=\"col\">Market status</th>\r\n            <th scope=\"col\">Quality status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody id=\"productList\">\r\n          { this.props.products.map((product, key) => {\r\n            return(!product.approved && product.city==this.state.value\r\n              ?\r\n              <tr key={key}>\r\n                <th scope=\"row\">{product.id.toString()}</th>\r\n                <th scope=\"roe\">{product.farmerID.toString()}</th>\r\n                <td>{product.name}</td>\r\n                <td>{window.web3.utils.fromWei(product.price.toString(), 'Ether')} Eth</td>\r\n                <td>{product.owner}</td>\r\n                <td>{product.city}</td>\r\n                <td>{product.purchased.toString()}</td>\r\n                <td>{product.approved.toString()}</td>\r\n              </tr>\r\n              :null)\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <p>&nbsp;</p>\r\n      <h1>Approved Products</h1>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Product ID</th>\r\n            <th scope=\"col\">Farmer ID</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Price</th>\r\n            <th scope=\"col\">Owner</th>\r\n            <th scope=\"col\">City</th>\r\n            <th scope=\"col\">Market status</th>\r\n            <th scope=\"col\">Quality status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody id=\"productList\">\r\n          { this.props.products.map((product, key) => {\r\n            return(product.approved && product.city==this.state.value\r\n              ?\r\n              <tr key={key}>\r\n                <th scope=\"row\">{product.id.toString()}</th>\r\n                <th scope=\"roe\">{product.farmerID.toString()}</th>\r\n                <td>{product.name}</td>\r\n                <td>{window.web3.utils.fromWei(product.price.toString(), 'Ether')} Eth</td>\r\n                <td>{product.owner}</td>\r\n                <td>{product.city}</td>\r\n                <td>{product.purchased.toString()}</td>\r\n                <td>{product.approved.toString()}</td>\r\n              </tr>\r\n              :null)\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <p>&nbsp;</p>\r\n    </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default QTesting;",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"89","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":63,"column":16,"nodeType":"87","messageId":"92","endLine":63,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":70,"column":16,"nodeType":"87","messageId":"92","endLine":70,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":161,"column":67,"nodeType":"95","endLine":161,"endColumn":80},{"ruleId":"93","severity":1,"message":"94","line":171,"column":68,"nodeType":"95","endLine":171,"endColumn":79},{"ruleId":"93","severity":1,"message":"94","line":182,"column":69,"nodeType":"95","endLine":182,"endColumn":81},{"ruleId":"93","severity":1,"message":"94","line":193,"column":70,"nodeType":"95","endLine":193,"endColumn":92},{"ruleId":"93","severity":1,"message":"94","line":203,"column":67,"nodeType":"95","endLine":203,"endColumn":89},{"ruleId":"93","severity":1,"message":"94","line":214,"column":69,"nodeType":"95","endLine":214,"endColumn":91},{"ruleId":"93","severity":1,"message":"94","line":226,"column":70,"nodeType":"95","endLine":226,"endColumn":92},{"ruleId":"93","severity":1,"message":"94","line":236,"column":72,"nodeType":"95","endLine":236,"endColumn":94},{"ruleId":"85","severity":1,"message":"96","line":2,"column":20,"nodeType":"87","messageId":"88","endLine":2,"endColumn":26},{"ruleId":"85","severity":1,"message":"97","line":2,"column":28,"nodeType":"87","messageId":"88","endLine":2,"endColumn":33},{"ruleId":"85","severity":1,"message":"98","line":2,"column":35,"nodeType":"87","messageId":"88","endLine":2,"endColumn":39},{"ruleId":"99","severity":1,"message":"100","line":98,"column":47,"nodeType":"101","messageId":"102","endLine":98,"endColumn":49},{"ruleId":"85","severity":1,"message":"103","line":28,"column":9,"nodeType":"87","messageId":"88","endLine":28,"endColumn":22},{"ruleId":"85","severity":1,"message":"96","line":2,"column":20,"nodeType":"87","messageId":"88","endLine":2,"endColumn":26},{"ruleId":"85","severity":1,"message":"97","line":2,"column":28,"nodeType":"87","messageId":"88","endLine":2,"endColumn":33},{"ruleId":"85","severity":1,"message":"98","line":2,"column":35,"nodeType":"87","messageId":"88","endLine":2,"endColumn":39},{"ruleId":"85","severity":1,"message":"96","line":2,"column":20,"nodeType":"87","messageId":"88","endLine":2,"endColumn":26},{"ruleId":"85","severity":1,"message":"97","line":2,"column":28,"nodeType":"87","messageId":"88","endLine":2,"endColumn":33},{"ruleId":"85","severity":1,"message":"98","line":2,"column":35,"nodeType":"87","messageId":"88","endLine":2,"endColumn":39},{"ruleId":"104","severity":1,"message":"105","line":49,"column":11,"nodeType":"106","endLine":49,"endColumn":14},{"ruleId":"104","severity":1,"message":"105","line":56,"column":11,"nodeType":"106","endLine":56,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":94,"column":53,"nodeType":"101","messageId":"102","endLine":94,"endColumn":55},{"ruleId":"99","severity":1,"message":"100","line":127,"column":52,"nodeType":"101","messageId":"102","endLine":127,"endColumn":54},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'user_password' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]