{"ast":null,"code":"const {\n  Transform\n} = require('stream');\nmodule.exports = KeccakState => class Keccak extends Transform {\n  constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {\n    super(options);\n    this._rate = rate;\n    this._capacity = capacity;\n    this._delimitedSuffix = delimitedSuffix;\n    this._hashBitLength = hashBitLength;\n    this._options = options;\n    this._state = new KeccakState();\n    this._state.initialize(rate, capacity);\n    this._finalized = false;\n  }\n  _transform(chunk, encoding, callback) {\n    let error = null;\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  }\n  _flush(callback) {\n    let error = null;\n    try {\n      this.push(this.digest());\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  }\n  update(data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n    this._state.absorb(data);\n    return this;\n  }\n  digest(encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);\n    let digest = this._state.squeeze(this._hashBitLength / 8);\n    if (encoding !== undefined) digest = digest.toString(encoding);\n    this._resetState();\n    return digest;\n  }\n\n  // remove result from memory\n  _resetState() {\n    this._state.initialize(this._rate, this._capacity);\n    return this;\n  }\n\n  // because sometimes we need hash right now and little later\n  _clone() {\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);\n    this._state.copy(clone._state);\n    clone._finalized = this._finalized;\n    return clone;\n  }\n};","map":{"version":3,"names":["Transform","require","module","exports","KeccakState","Keccak","constructor","rate","capacity","delimitedSuffix","hashBitLength","options","_rate","_capacity","_delimitedSuffix","_hashBitLength","_options","_state","initialize","_finalized","_transform","chunk","encoding","callback","error","update","err","_flush","push","digest","data","Buffer","isBuffer","TypeError","Error","from","absorb","absorbLastFewBits","squeeze","undefined","toString","_resetState","_clone","clone","copy"],"sources":["F:/Farmers_Marketplace1/node_modules/keccak/lib/api/keccak.js"],"sourcesContent":["const { Transform } = require('stream')\r\n\r\nmodule.exports = (KeccakState) => class Keccak extends Transform {\r\n  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {\r\n    super(options)\r\n\r\n    this._rate = rate\r\n    this._capacity = capacity\r\n    this._delimitedSuffix = delimitedSuffix\r\n    this._hashBitLength = hashBitLength\r\n    this._options = options\r\n\r\n    this._state = new KeccakState()\r\n    this._state.initialize(rate, capacity)\r\n    this._finalized = false\r\n  }\r\n\r\n  _transform (chunk, encoding, callback) {\r\n    let error = null\r\n    try {\r\n      this.update(chunk, encoding)\r\n    } catch (err) {\r\n      error = err\r\n    }\r\n\r\n    callback(error)\r\n  }\r\n\r\n  _flush (callback) {\r\n    let error = null\r\n    try {\r\n      this.push(this.digest())\r\n    } catch (err) {\r\n      error = err\r\n    }\r\n\r\n    callback(error)\r\n  }\r\n\r\n  update (data, encoding) {\r\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\r\n    if (this._finalized) throw new Error('Digest already called')\r\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\r\n\r\n    this._state.absorb(data)\r\n\r\n    return this\r\n  }\r\n\r\n  digest (encoding) {\r\n    if (this._finalized) throw new Error('Digest already called')\r\n    this._finalized = true\r\n\r\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\r\n    let digest = this._state.squeeze(this._hashBitLength / 8)\r\n    if (encoding !== undefined) digest = digest.toString(encoding)\r\n\r\n    this._resetState()\r\n\r\n    return digest\r\n  }\r\n\r\n  // remove result from memory\r\n  _resetState () {\r\n    this._state.initialize(this._rate, this._capacity)\r\n    return this\r\n  }\r\n\r\n  // because sometimes we need hash right now and little later\r\n  _clone () {\r\n    const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\r\n    this._state.copy(clone._state)\r\n    clone._finalized = this._finalized\r\n\r\n    return clone\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEvCC,MAAM,CAACC,OAAO,GAAIC,WAAW,IAAK,MAAMC,MAAM,SAASL,SAAS,CAAC;EAC/DM,WAAWA,CAAEC,IAAI,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,aAAa,EAAEC,OAAO,EAAE;IACpE,KAAK,CAACA,OAAO,CAAC;IAEd,IAAI,CAACC,KAAK,GAAGL,IAAI;IACjB,IAAI,CAACM,SAAS,GAAGL,QAAQ;IACzB,IAAI,CAACM,gBAAgB,GAAGL,eAAe;IACvC,IAAI,CAACM,cAAc,GAAGL,aAAa;IACnC,IAAI,CAACM,QAAQ,GAAGL,OAAO;IAEvB,IAAI,CAACM,MAAM,GAAG,IAAIb,WAAW,CAAC,CAAC;IAC/B,IAAI,CAACa,MAAM,CAACC,UAAU,CAACX,IAAI,EAAEC,QAAQ,CAAC;IACtC,IAAI,CAACW,UAAU,GAAG,KAAK;EACzB;EAEAC,UAAUA,CAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACrC,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI;MACF,IAAI,CAACC,MAAM,CAACJ,KAAK,EAAEC,QAAQ,CAAC;IAC9B,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZF,KAAK,GAAGE,GAAG;IACb;IAEAH,QAAQ,CAACC,KAAK,CAAC;EACjB;EAEAG,MAAMA,CAAEJ,QAAQ,EAAE;IAChB,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI;MACF,IAAI,CAACI,IAAI,CAAC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOH,GAAG,EAAE;MACZF,KAAK,GAAGE,GAAG;IACb;IAEAH,QAAQ,CAACC,KAAK,CAAC;EACjB;EAEAC,MAAMA,CAAEK,IAAI,EAAER,QAAQ,EAAE;IACtB,IAAI,CAACS,MAAM,CAACC,QAAQ,CAACF,IAAI,CAAC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,MAAM,IAAIG,SAAS,CAAC,mCAAmC,CAAC;IAChH,IAAI,IAAI,CAACd,UAAU,EAAE,MAAM,IAAIe,KAAK,CAAC,uBAAuB,CAAC;IAC7D,IAAI,CAACH,MAAM,CAACC,QAAQ,CAACF,IAAI,CAAC,EAAEA,IAAI,GAAGC,MAAM,CAACI,IAAI,CAACL,IAAI,EAAER,QAAQ,CAAC;IAE9D,IAAI,CAACL,MAAM,CAACmB,MAAM,CAACN,IAAI,CAAC;IAExB,OAAO,IAAI;EACb;EAEAD,MAAMA,CAAEP,QAAQ,EAAE;IAChB,IAAI,IAAI,CAACH,UAAU,EAAE,MAAM,IAAIe,KAAK,CAAC,uBAAuB,CAAC;IAC7D,IAAI,CAACf,UAAU,GAAG,IAAI;IAEtB,IAAI,IAAI,CAACL,gBAAgB,EAAE,IAAI,CAACG,MAAM,CAACoB,iBAAiB,CAAC,IAAI,CAACvB,gBAAgB,CAAC;IAC/E,IAAIe,MAAM,GAAG,IAAI,CAACZ,MAAM,CAACqB,OAAO,CAAC,IAAI,CAACvB,cAAc,GAAG,CAAC,CAAC;IACzD,IAAIO,QAAQ,KAAKiB,SAAS,EAAEV,MAAM,GAAGA,MAAM,CAACW,QAAQ,CAAClB,QAAQ,CAAC;IAE9D,IAAI,CAACmB,WAAW,CAAC,CAAC;IAElB,OAAOZ,MAAM;EACf;;EAEA;EACAY,WAAWA,CAAA,EAAI;IACb,IAAI,CAACxB,MAAM,CAACC,UAAU,CAAC,IAAI,CAACN,KAAK,EAAE,IAAI,CAACC,SAAS,CAAC;IAClD,OAAO,IAAI;EACb;;EAEA;EACA6B,MAAMA,CAAA,EAAI;IACR,MAAMC,KAAK,GAAG,IAAItC,MAAM,CAAC,IAAI,CAACO,KAAK,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAACC,QAAQ,CAAC;IAC/G,IAAI,CAACC,MAAM,CAAC2B,IAAI,CAACD,KAAK,CAAC1B,MAAM,CAAC;IAC9B0B,KAAK,CAACxB,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,OAAOwB,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}