{"ast":null,"code":"/**\r\n * Implementation of the multicodec specification.\r\n *\r\n * @module multicodec\r\n * @example\r\n * const multicodec = require('multicodec')\r\n *\r\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\r\n * // prefixedProtobuf 0x50...\r\n *\r\n */\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst varint = require('varint');\nconst intTable = require('./int-table');\nconst codecNameToCodeVarint = require('./varint-table');\nconst util = require('./util');\nexports = module.exports;\n\n/**\r\n * Prefix a buffer with a multicodec-packed.\r\n *\r\n * @param {string|number} multicodecStrOrCode\r\n * @param {Buffer} data\r\n * @returns {Buffer}\r\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix;\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return Buffer.concat([prefix, data]);\n};\n\n/**\r\n * Decapsulate the multicodec-packed prefix from the data.\r\n *\r\n * @param {Buffer} data\r\n * @returns {Buffer}\r\n */\nexports.rmPrefix = data => {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n\n/**\r\n * Get the codec of the prefixed data.\r\n * @param {Buffer} prefixedData\r\n * @returns {string}\r\n */\nexports.getCodec = prefixedData => {\n  const code = varint.decode(prefixedData);\n  const codecName = intTable.get(code);\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`);\n  }\n  return codecName;\n};\n\n/**\r\n * Get the name of the codec.\r\n * @param {number} codec\r\n * @returns {string}\r\n */\nexports.getName = codec => {\n  return intTable.get(codec);\n};\n\n/**\r\n * Get the code of the codec\r\n * @param {string} name\r\n * @returns {number}\r\n */\nexports.getNumber = name => {\n  const code = codecNameToCodeVarint[name];\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n  return util.varintBufferDecode(code)[0];\n};\n\n/**\r\n * Get the code of the prefixed data.\r\n * @param {Buffer} prefixedData\r\n * @returns {number}\r\n */\nexports.getCode = prefixedData => {\n  return varint.decode(prefixedData);\n};\n\n/**\r\n * Get the code as varint of a codec name.\r\n * @param {string} codecName\r\n * @returns {Buffer}\r\n */\nexports.getCodeVarint = codecName => {\n  const code = codecNameToCodeVarint[codecName];\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n  return code;\n};\n\n/**\r\n * Get the varint of a code.\r\n * @param {Number} code\r\n * @returns {Array.<number>}\r\n */\nexports.getVarint = code => {\n  return varint.encode(code);\n};\n\n// Make the constants top-level constants\nconst constants = require('./constants');\nObject.assign(exports, constants);\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print');","map":{"version":3,"names":["Buffer","require","varint","intTable","codecNameToCodeVarint","util","exports","module","addPrefix","multicodecStrOrCode","data","prefix","isBuffer","varintBufferEncode","Error","concat","rmPrefix","decode","slice","bytes","getCodec","prefixedData","code","codecName","get","undefined","getName","codec","getNumber","name","varintBufferDecode","getCode","getCodeVarint","getVarint","encode","constants","Object","assign","print"],"sources":["F:/Farmers_Marketplace1/node_modules/cids/node_modules/multicodec/src/index.js"],"sourcesContent":["/**\r\n * Implementation of the multicodec specification.\r\n *\r\n * @module multicodec\r\n * @example\r\n * const multicodec = require('multicodec')\r\n *\r\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\r\n * // prefixedProtobuf 0x50...\r\n *\r\n */\r\n'use strict'\r\n\r\nconst { Buffer } = require('buffer')\r\nconst varint = require('varint')\r\nconst intTable = require('./int-table')\r\nconst codecNameToCodeVarint = require('./varint-table')\r\nconst util = require('./util')\r\n\r\nexports = module.exports\r\n\r\n/**\r\n * Prefix a buffer with a multicodec-packed.\r\n *\r\n * @param {string|number} multicodecStrOrCode\r\n * @param {Buffer} data\r\n * @returns {Buffer}\r\n */\r\nexports.addPrefix = (multicodecStrOrCode, data) => {\r\n  let prefix\r\n\r\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\r\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\r\n  } else {\r\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\r\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\r\n    } else {\r\n      throw new Error('multicodec not recognized')\r\n    }\r\n  }\r\n  return Buffer.concat([prefix, data])\r\n}\r\n\r\n/**\r\n * Decapsulate the multicodec-packed prefix from the data.\r\n *\r\n * @param {Buffer} data\r\n * @returns {Buffer}\r\n */\r\nexports.rmPrefix = (data) => {\r\n  varint.decode(data)\r\n  return data.slice(varint.decode.bytes)\r\n}\r\n\r\n/**\r\n * Get the codec of the prefixed data.\r\n * @param {Buffer} prefixedData\r\n * @returns {string}\r\n */\r\nexports.getCodec = (prefixedData) => {\r\n  const code = varint.decode(prefixedData)\r\n  const codecName = intTable.get(code)\r\n  if (codecName === undefined) {\r\n    throw new Error(`Code ${code} not found`)\r\n  }\r\n  return codecName\r\n}\r\n\r\n/**\r\n * Get the name of the codec.\r\n * @param {number} codec\r\n * @returns {string}\r\n */\r\nexports.getName = (codec) => {\r\n  return intTable.get(codec)\r\n}\r\n\r\n/**\r\n * Get the code of the codec\r\n * @param {string} name\r\n * @returns {number}\r\n */\r\nexports.getNumber = (name) => {\r\n  const code = codecNameToCodeVarint[name]\r\n  if (code === undefined) {\r\n    throw new Error('Codec `' + name + '` not found')\r\n  }\r\n  return util.varintBufferDecode(code)[0]\r\n}\r\n\r\n/**\r\n * Get the code of the prefixed data.\r\n * @param {Buffer} prefixedData\r\n * @returns {number}\r\n */\r\nexports.getCode = (prefixedData) => {\r\n  return varint.decode(prefixedData)\r\n}\r\n\r\n/**\r\n * Get the code as varint of a codec name.\r\n * @param {string} codecName\r\n * @returns {Buffer}\r\n */\r\nexports.getCodeVarint = (codecName) => {\r\n  const code = codecNameToCodeVarint[codecName]\r\n  if (code === undefined) {\r\n    throw new Error('Codec `' + codecName + '` not found')\r\n  }\r\n  return code\r\n}\r\n\r\n/**\r\n * Get the varint of a code.\r\n * @param {Number} code\r\n * @returns {Array.<number>}\r\n */\r\nexports.getVarint = (code) => {\r\n  return varint.encode(code)\r\n}\r\n\r\n// Make the constants top-level constants\r\nconst constants = require('./constants')\r\nObject.assign(exports, constants)\r\n\r\n// Human friendly names for printing, e.g. in error messages\r\nexports.print = require('./print')\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACpC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AACvD,MAAMI,IAAI,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAE9BK,OAAO,GAAGC,MAAM,CAACD,OAAO;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACE,SAAS,GAAG,CAACC,mBAAmB,EAAEC,IAAI,KAAK;EACjD,IAAIC,MAAM;EAEV,IAAIX,MAAM,CAACY,QAAQ,CAACH,mBAAmB,CAAC,EAAE;IACxCE,MAAM,GAAGN,IAAI,CAACQ,kBAAkB,CAACJ,mBAAmB,CAAC;EACvD,CAAC,MAAM;IACL,IAAIL,qBAAqB,CAACK,mBAAmB,CAAC,EAAE;MAC9CE,MAAM,GAAGP,qBAAqB,CAACK,mBAAmB,CAAC;IACrD,CAAC,MAAM;MACL,MAAM,IAAIK,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF;EACA,OAAOd,MAAM,CAACe,MAAM,CAAC,CAACJ,MAAM,EAAED,IAAI,CAAC,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACU,QAAQ,GAAIN,IAAI,IAAK;EAC3BR,MAAM,CAACe,MAAM,CAACP,IAAI,CAAC;EACnB,OAAOA,IAAI,CAACQ,KAAK,CAAChB,MAAM,CAACe,MAAM,CAACE,KAAK,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAb,OAAO,CAACc,QAAQ,GAAIC,YAAY,IAAK;EACnC,MAAMC,IAAI,GAAGpB,MAAM,CAACe,MAAM,CAACI,YAAY,CAAC;EACxC,MAAME,SAAS,GAAGpB,QAAQ,CAACqB,GAAG,CAACF,IAAI,CAAC;EACpC,IAAIC,SAAS,KAAKE,SAAS,EAAE;IAC3B,MAAM,IAAIX,KAAK,CAAC,QAAQQ,IAAI,YAAY,CAAC;EAC3C;EACA,OAAOC,SAAS;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAjB,OAAO,CAACoB,OAAO,GAAIC,KAAK,IAAK;EAC3B,OAAOxB,QAAQ,CAACqB,GAAG,CAACG,KAAK,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACArB,OAAO,CAACsB,SAAS,GAAIC,IAAI,IAAK;EAC5B,MAAMP,IAAI,GAAGlB,qBAAqB,CAACyB,IAAI,CAAC;EACxC,IAAIP,IAAI,KAAKG,SAAS,EAAE;IACtB,MAAM,IAAIX,KAAK,CAAC,SAAS,GAAGe,IAAI,GAAG,aAAa,CAAC;EACnD;EACA,OAAOxB,IAAI,CAACyB,kBAAkB,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhB,OAAO,CAACyB,OAAO,GAAIV,YAAY,IAAK;EAClC,OAAOnB,MAAM,CAACe,MAAM,CAACI,YAAY,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAf,OAAO,CAAC0B,aAAa,GAAIT,SAAS,IAAK;EACrC,MAAMD,IAAI,GAAGlB,qBAAqB,CAACmB,SAAS,CAAC;EAC7C,IAAID,IAAI,KAAKG,SAAS,EAAE;IACtB,MAAM,IAAIX,KAAK,CAAC,SAAS,GAAGS,SAAS,GAAG,aAAa,CAAC;EACxD;EACA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhB,OAAO,CAAC2B,SAAS,GAAIX,IAAI,IAAK;EAC5B,OAAOpB,MAAM,CAACgC,MAAM,CAACZ,IAAI,CAAC;AAC5B,CAAC;;AAED;AACA,MAAMa,SAAS,GAAGlC,OAAO,CAAC,aAAa,CAAC;AACxCmC,MAAM,CAACC,MAAM,CAAC/B,OAAO,EAAE6B,SAAS,CAAC;;AAEjC;AACA7B,OAAO,CAACgC,KAAK,GAAGrC,OAAO,CAAC,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}