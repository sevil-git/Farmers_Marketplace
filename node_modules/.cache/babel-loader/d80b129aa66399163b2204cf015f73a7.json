{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/**\r\n * @file subscription.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar EventEmitter = require('eventemitter3');\nvar formatters = require('web3-core-helpers').formatters;\nfunction Subscription(options) {\n  EventEmitter.call(this);\n  this.id = null;\n  this.callback = _.identity;\n  this.arguments = null;\n  this.lastBlock = null; // \"from\" block tracker for backfilling events on reconnection\n  this.options = {\n    subscription: options.subscription,\n    type: options.type,\n    requestManager: options.requestManager\n  };\n}\n// INHERIT\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n/**\r\n * Should be used to extract callback from array of arguments. Modifies input param\r\n *\r\n * @method extractCallback\r\n * @param {Array} arguments\r\n * @return {Function|Null} callback, if exists\r\n */\nSubscription.prototype._extractCallback = function (args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\r\n * Should be called to check if the number of arguments is correct\r\n *\r\n * @method validateArgs\r\n * @param {Array} arguments\r\n * @throws {Error} if it is not\r\n */\nSubscription.prototype._validateArgs = function (args) {\n  var subscription = this.options.subscription;\n  if (!subscription) subscription = {};\n  if (!subscription.params) subscription.params = 0;\n  if (args.length !== subscription.params) {\n    throw errors.InvalidNumberOfParams(args.length, subscription.params, subscription.subscriptionName);\n  }\n};\n/**\r\n * Should be called to format input args of method\r\n *\r\n * @method formatInput\r\n * @param {Array}\r\n * @return {Array}\r\n */\nSubscription.prototype._formatInput = function (args) {\n  var subscription = this.options.subscription;\n  if (!subscription) {\n    return args;\n  }\n  if (!subscription.inputFormatter) {\n    return args;\n  }\n  var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\n    return formatter ? formatter(args[index]) : args[index];\n  });\n  return formattedArgs;\n};\n/**\r\n * Should be called to format output(result) of method\r\n *\r\n * @method formatOutput\r\n * @param result {Object}\r\n * @return {Object}\r\n */\nSubscription.prototype._formatOutput = function (result) {\n  var subscription = this.options.subscription;\n  return subscription && subscription.outputFormatter && result ? subscription.outputFormatter(result) : result;\n};\n/**\r\n * Should create payload from given input args\r\n *\r\n * @method toPayload\r\n * @param {Array} args\r\n * @return {Object}\r\n */\nSubscription.prototype._toPayload = function (args) {\n  var params = [];\n  this.callback = this._extractCallback(args) || _.identity;\n  if (!this.subscriptionMethod) {\n    this.subscriptionMethod = args.shift();\n    // replace subscription with given name\n    if (this.options.subscription.subscriptionName) {\n      this.subscriptionMethod = this.options.subscription.subscriptionName;\n    }\n  }\n  if (!this.arguments) {\n    this.arguments = this._formatInput(args);\n    this._validateArgs(this.arguments);\n    args = []; // make empty after validation\n  }\n  // re-add subscriptionName\n  params.push(this.subscriptionMethod);\n  params = params.concat(this.arguments);\n  if (args.length) {\n    throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n  }\n  return {\n    method: this.options.type + '_subscribe',\n    params: params\n  };\n};\n/**\r\n * Unsubscribes and clears callbacks\r\n *\r\n * @method unsubscribe\r\n * @return {Object}\r\n */\nSubscription.prototype.unsubscribe = function (callback) {\n  this.options.requestManager.removeSubscription(this.id, callback);\n  this.id = null;\n  this.lastBlock = null;\n  this.removeAllListeners();\n};\n/**\r\n * Subscribes and watches for changes\r\n *\r\n * @method subscribe\r\n * @param {String} subscription the subscription\r\n * @param {Object} options the options object with address topics and fromBlock\r\n * @return {Object}\r\n */\nSubscription.prototype.subscribe = function () {\n  var _this = this;\n  var args = Array.prototype.slice.call(arguments);\n  var payload = this._toPayload(args);\n  if (!payload) {\n    return this;\n  }\n  // throw error, if provider is not set\n  if (!this.options.requestManager.provider) {\n    setTimeout(function () {\n      var err1 = new Error('No provider set.');\n      _this.callback(err1, null, _this);\n      _this.emit('error', err1);\n    }, 0);\n    return this;\n  }\n  // throw error, if provider doesnt support subscriptions\n  if (!this.options.requestManager.provider.on) {\n    setTimeout(function () {\n      var err2 = new Error('The current provider doesn\\'t support subscriptions: ' + _this.options.requestManager.provider.constructor.name);\n      _this.callback(err2, null, _this);\n      _this.emit('error', err2);\n    }, 0);\n    return this;\n  }\n  // Re-subscription only: continue fetching from the last block we received.\n  // a dropped connection may have resulted in gaps in the logs...\n  if (this.lastBlock && _.isObject(this.options.params)) {\n    payload.params[1] = this.options.params;\n    payload.params[1].fromBlock = formatters.inputBlockNumberFormatter(this.lastBlock + 1);\n  }\n  // if id is there unsubscribe first\n  if (this.id) {\n    this.unsubscribe();\n  }\n  // store the params in the options object\n  this.options.params = payload.params[1];\n  // get past logs, if fromBlock is available\n  if (payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\n    // send the subscription request\n    // copy the params to avoid race-condition with deletion below this block\n    var blockParams = Object.assign({}, payload.params[1]);\n    this.options.requestManager.send({\n      method: 'eth_getLogs',\n      params: [blockParams]\n    }, function (err, logs) {\n      if (!err) {\n        logs.forEach(function (log) {\n          var output = _this._formatOutput(log);\n          _this.callback(null, output, _this);\n          _this.emit('data', output);\n        });\n        // TODO subscribe here? after the past logs?\n      } else {\n        setTimeout(function () {\n          _this.callback(err, null, _this);\n          _this.emit('error', err);\n        }, 0);\n      }\n    });\n  }\n  // create subscription\n  // TODO move to separate function? so that past logs can go first?\n  if (typeof payload.params[1] === 'object') delete payload.params[1].fromBlock;\n  this.options.requestManager.send(payload, function (err, result) {\n    if (!err && result) {\n      _this.id = result;\n      _this.method = payload.params[0];\n      _this.emit('connected', result);\n      // call callback on notifications\n      _this.options.requestManager.addSubscription(_this, function (error, result) {\n        if (!error) {\n          if (!_.isArray(result)) {\n            result = [result];\n          }\n          result.forEach(function (resultItem) {\n            var output = _this._formatOutput(resultItem);\n            // Track current block (for gaps introduced by dropped connections)\n            _this.lastBlock = _.isObject(output) ? output.blockNumber : null;\n            if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\n              return _this.options.subscription.subscriptionHandler.call(_this, output);\n            } else {\n              _this.emit('data', output);\n            }\n            // call the callback, last so that unsubscribe there won't affect the emit above\n            _this.callback(null, output, _this);\n          });\n        } else {\n          _this.callback(error, false, _this);\n          _this.emit('error', error);\n        }\n      });\n    } else {\n      setTimeout(function () {\n        _this.callback(err, false, _this);\n        _this.emit('error', err);\n      }, 0);\n    }\n  });\n  // return an object to cancel the subscription\n  return this;\n};\n/**\r\n * Resubscribe\r\n *\r\n * @method resubscribe\r\n *\r\n * @returns {void}\r\n */\nSubscription.prototype.resubscribe = function () {\n  this.options.requestManager.removeSubscription(this.id); // unsubscribe\n  this.id = null;\n  this.subscribe(this.callback);\n};\nmodule.exports = Subscription;","map":{"version":3,"names":["_","require","errors","EventEmitter","formatters","Subscription","options","call","id","callback","identity","arguments","lastBlock","subscription","type","requestManager","prototype","Object","create","constructor","_extractCallback","args","isFunction","length","pop","_validateArgs","params","InvalidNumberOfParams","subscriptionName","_formatInput","inputFormatter","formattedArgs","map","formatter","index","_formatOutput","result","outputFormatter","_toPayload","subscriptionMethod","shift","push","concat","Error","method","unsubscribe","removeSubscription","removeAllListeners","subscribe","_this","Array","slice","payload","provider","setTimeout","err1","emit","on","err2","name","isObject","fromBlock","inputBlockNumberFormatter","hasOwnProperty","isFinite","blockParams","assign","send","err","logs","forEach","log","output","addSubscription","error","isArray","resultItem","blockNumber","subscriptionHandler","resubscribe","module","exports"],"sources":["F:/Farmers_Marketplace1/node_modules/web3-core-subscriptions/lib/subscription.js"],"sourcesContent":["/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/**\r\n * @file subscription.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\"use strict\";\r\nvar _ = require('underscore');\r\nvar errors = require('web3-core-helpers').errors;\r\nvar EventEmitter = require('eventemitter3');\r\nvar formatters = require('web3-core-helpers').formatters;\r\nfunction Subscription(options) {\r\n    EventEmitter.call(this);\r\n    this.id = null;\r\n    this.callback = _.identity;\r\n    this.arguments = null;\r\n    this.lastBlock = null; // \"from\" block tracker for backfilling events on reconnection\r\n    this.options = {\r\n        subscription: options.subscription,\r\n        type: options.type,\r\n        requestManager: options.requestManager\r\n    };\r\n}\r\n// INHERIT\r\nSubscription.prototype = Object.create(EventEmitter.prototype);\r\nSubscription.prototype.constructor = Subscription;\r\n/**\r\n * Should be used to extract callback from array of arguments. Modifies input param\r\n *\r\n * @method extractCallback\r\n * @param {Array} arguments\r\n * @return {Function|Null} callback, if exists\r\n */\r\nSubscription.prototype._extractCallback = function (args) {\r\n    if (_.isFunction(args[args.length - 1])) {\r\n        return args.pop(); // modify the args array!\r\n    }\r\n};\r\n/**\r\n * Should be called to check if the number of arguments is correct\r\n *\r\n * @method validateArgs\r\n * @param {Array} arguments\r\n * @throws {Error} if it is not\r\n */\r\nSubscription.prototype._validateArgs = function (args) {\r\n    var subscription = this.options.subscription;\r\n    if (!subscription)\r\n        subscription = {};\r\n    if (!subscription.params)\r\n        subscription.params = 0;\r\n    if (args.length !== subscription.params) {\r\n        throw errors.InvalidNumberOfParams(args.length, subscription.params, subscription.subscriptionName);\r\n    }\r\n};\r\n/**\r\n * Should be called to format input args of method\r\n *\r\n * @method formatInput\r\n * @param {Array}\r\n * @return {Array}\r\n */\r\nSubscription.prototype._formatInput = function (args) {\r\n    var subscription = this.options.subscription;\r\n    if (!subscription) {\r\n        return args;\r\n    }\r\n    if (!subscription.inputFormatter) {\r\n        return args;\r\n    }\r\n    var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\r\n        return formatter ? formatter(args[index]) : args[index];\r\n    });\r\n    return formattedArgs;\r\n};\r\n/**\r\n * Should be called to format output(result) of method\r\n *\r\n * @method formatOutput\r\n * @param result {Object}\r\n * @return {Object}\r\n */\r\nSubscription.prototype._formatOutput = function (result) {\r\n    var subscription = this.options.subscription;\r\n    return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;\r\n};\r\n/**\r\n * Should create payload from given input args\r\n *\r\n * @method toPayload\r\n * @param {Array} args\r\n * @return {Object}\r\n */\r\nSubscription.prototype._toPayload = function (args) {\r\n    var params = [];\r\n    this.callback = this._extractCallback(args) || _.identity;\r\n    if (!this.subscriptionMethod) {\r\n        this.subscriptionMethod = args.shift();\r\n        // replace subscription with given name\r\n        if (this.options.subscription.subscriptionName) {\r\n            this.subscriptionMethod = this.options.subscription.subscriptionName;\r\n        }\r\n    }\r\n    if (!this.arguments) {\r\n        this.arguments = this._formatInput(args);\r\n        this._validateArgs(this.arguments);\r\n        args = []; // make empty after validation\r\n    }\r\n    // re-add subscriptionName\r\n    params.push(this.subscriptionMethod);\r\n    params = params.concat(this.arguments);\r\n    if (args.length) {\r\n        throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\r\n    }\r\n    return {\r\n        method: this.options.type + '_subscribe',\r\n        params: params\r\n    };\r\n};\r\n/**\r\n * Unsubscribes and clears callbacks\r\n *\r\n * @method unsubscribe\r\n * @return {Object}\r\n */\r\nSubscription.prototype.unsubscribe = function (callback) {\r\n    this.options.requestManager.removeSubscription(this.id, callback);\r\n    this.id = null;\r\n    this.lastBlock = null;\r\n    this.removeAllListeners();\r\n};\r\n/**\r\n * Subscribes and watches for changes\r\n *\r\n * @method subscribe\r\n * @param {String} subscription the subscription\r\n * @param {Object} options the options object with address topics and fromBlock\r\n * @return {Object}\r\n */\r\nSubscription.prototype.subscribe = function () {\r\n    var _this = this;\r\n    var args = Array.prototype.slice.call(arguments);\r\n    var payload = this._toPayload(args);\r\n    if (!payload) {\r\n        return this;\r\n    }\r\n    // throw error, if provider is not set\r\n    if (!this.options.requestManager.provider) {\r\n        setTimeout(function () {\r\n            var err1 = new Error('No provider set.');\r\n            _this.callback(err1, null, _this);\r\n            _this.emit('error', err1);\r\n        }, 0);\r\n        return this;\r\n    }\r\n    // throw error, if provider doesnt support subscriptions\r\n    if (!this.options.requestManager.provider.on) {\r\n        setTimeout(function () {\r\n            var err2 = new Error('The current provider doesn\\'t support subscriptions: ' +\r\n                _this.options.requestManager.provider.constructor.name);\r\n            _this.callback(err2, null, _this);\r\n            _this.emit('error', err2);\r\n        }, 0);\r\n        return this;\r\n    }\r\n    // Re-subscription only: continue fetching from the last block we received.\r\n    // a dropped connection may have resulted in gaps in the logs...\r\n    if (this.lastBlock && _.isObject(this.options.params)) {\r\n        payload.params[1] = this.options.params;\r\n        payload.params[1].fromBlock = formatters.inputBlockNumberFormatter(this.lastBlock + 1);\r\n    }\r\n    // if id is there unsubscribe first\r\n    if (this.id) {\r\n        this.unsubscribe();\r\n    }\r\n    // store the params in the options object\r\n    this.options.params = payload.params[1];\r\n    // get past logs, if fromBlock is available\r\n    if (payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\r\n        // send the subscription request\r\n        // copy the params to avoid race-condition with deletion below this block\r\n        var blockParams = Object.assign({}, payload.params[1]);\r\n        this.options.requestManager.send({\r\n            method: 'eth_getLogs',\r\n            params: [blockParams]\r\n        }, function (err, logs) {\r\n            if (!err) {\r\n                logs.forEach(function (log) {\r\n                    var output = _this._formatOutput(log);\r\n                    _this.callback(null, output, _this);\r\n                    _this.emit('data', output);\r\n                });\r\n                // TODO subscribe here? after the past logs?\r\n            }\r\n            else {\r\n                setTimeout(function () {\r\n                    _this.callback(err, null, _this);\r\n                    _this.emit('error', err);\r\n                }, 0);\r\n            }\r\n        });\r\n    }\r\n    // create subscription\r\n    // TODO move to separate function? so that past logs can go first?\r\n    if (typeof payload.params[1] === 'object')\r\n        delete payload.params[1].fromBlock;\r\n    this.options.requestManager.send(payload, function (err, result) {\r\n        if (!err && result) {\r\n            _this.id = result;\r\n            _this.method = payload.params[0];\r\n            _this.emit('connected', result);\r\n            // call callback on notifications\r\n            _this.options.requestManager.addSubscription(_this, function (error, result) {\r\n                if (!error) {\r\n                    if (!_.isArray(result)) {\r\n                        result = [result];\r\n                    }\r\n                    result.forEach(function (resultItem) {\r\n                        var output = _this._formatOutput(resultItem);\r\n                        // Track current block (for gaps introduced by dropped connections)\r\n                        _this.lastBlock = _.isObject(output) ? output.blockNumber : null;\r\n                        if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\r\n                            return _this.options.subscription.subscriptionHandler.call(_this, output);\r\n                        }\r\n                        else {\r\n                            _this.emit('data', output);\r\n                        }\r\n                        // call the callback, last so that unsubscribe there won't affect the emit above\r\n                        _this.callback(null, output, _this);\r\n                    });\r\n                }\r\n                else {\r\n                    _this.callback(error, false, _this);\r\n                    _this.emit('error', error);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                _this.callback(err, false, _this);\r\n                _this.emit('error', err);\r\n            }, 0);\r\n        }\r\n    });\r\n    // return an object to cancel the subscription\r\n    return this;\r\n};\r\n/**\r\n * Resubscribe\r\n *\r\n * @method resubscribe\r\n *\r\n * @returns {void}\r\n */\r\nSubscription.prototype.resubscribe = function () {\r\n    this.options.requestManager.removeSubscription(this.id); // unsubscribe\r\n    this.id = null;\r\n    this.subscribe(this.callback);\r\n};\r\nmodule.exports = Subscription;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}