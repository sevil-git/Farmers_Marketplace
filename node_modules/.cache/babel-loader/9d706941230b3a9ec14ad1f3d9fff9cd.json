{"ast":null,"code":"import _ from './underscore.js';\nimport { toString, SymbolProto } from './_setup.js';\nimport getByteLength from './_getByteLength.js';\nimport isTypedArray from './isTypedArray.js';\nimport isFunction from './isFunction.js';\nimport { hasStringTagBug } from './_stringTagBug.js';\nimport isDataView from './isDataView.js';\nimport keys from './keys.js';\nimport has from './_has.js';\nimport toBufferView from './_toBufferView.js';\n\n// We use this string twice, so give it a name for minification.\nvar tagDataView = '[object DataView]';\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction eq(a, b, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  // `null` or `undefined` only equal to itself (strict comparison).\n  if (a == null || b == null) return false;\n  // `NaN`s are equivalent, but non-reflexive.\n  if (a !== a) return b !== b;\n  // Exhaust primitive checks\n  var type = typeof a;\n  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n  return deepEq(a, b, aStack, bStack);\n}\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction deepEq(a, b, aStack, bStack) {\n  // Unwrap any wrapped objects.\n  if (a instanceof _) a = a._wrapped;\n  if (b instanceof _) b = b._wrapped;\n  // Compare `[[Class]]` names.\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n  // Work around a bug in IE 10 - Edge 13.\n  if (hasStringTagBug && className == '[object Object]' && isDataView(a)) {\n    if (!isDataView(b)) return false;\n    className = tagDataView;\n  }\n  switch (className) {\n    // These types are compared by value.\n    case '[object RegExp]':\n    // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return '' + a === '' + b;\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b;\n      // An `egal` comparison is performed for other numeric values.\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n    case '[object Symbol]':\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    case '[object ArrayBuffer]':\n    case tagDataView:\n      // Coerce to typed array so we can fall through.\n      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);\n  }\n  var areArrays = className === '[object Array]';\n  if (!areArrays && isTypedArray(a)) {\n    var byteLength = getByteLength(a);\n    if (byteLength !== getByteLength(b)) return false;\n    if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\n    areArrays = true;\n  }\n  if (!areArrays) {\n    if (typeof a != 'object' || typeof b != 'object') return false;\n\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n    var aCtor = a.constructor,\n      bCtor = b.constructor;\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n      return false;\n    }\n  }\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  }\n\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n\n  // Recursively compare objects and arrays.\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false;\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (length--) {\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var _keys = keys(a),\n      key;\n    length = _keys.length;\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (keys(b).length !== length) return false;\n    while (length--) {\n      // Deep compare each member\n      key = _keys[length];\n      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\n// Perform a deep comparison to check if two objects are equal.\nexport default function isEqual(a, b) {\n  return eq(a, b);\n}","map":{"version":3,"names":["_","toString","SymbolProto","getByteLength","isTypedArray","isFunction","hasStringTagBug","isDataView","keys","has","toBufferView","tagDataView","eq","a","b","aStack","bStack","type","deepEq","_wrapped","className","call","valueOf","areArrays","byteLength","buffer","byteOffset","aCtor","constructor","bCtor","length","push","_keys","key","pop","isEqual"],"sources":["F:/Farmers_Marketplace1/node_modules/underscore/modules/isEqual.js"],"sourcesContent":["import _ from './underscore.js';\r\nimport { toString, SymbolProto } from './_setup.js';\r\nimport getByteLength from './_getByteLength.js';\r\nimport isTypedArray from './isTypedArray.js';\r\nimport isFunction from './isFunction.js';\r\nimport { hasStringTagBug }  from './_stringTagBug.js';\r\nimport isDataView from './isDataView.js';\r\nimport keys from './keys.js';\r\nimport has from './_has.js';\r\nimport toBufferView from './_toBufferView.js';\r\n\r\n// We use this string twice, so give it a name for minification.\r\nvar tagDataView = '[object DataView]';\r\n\r\n// Internal recursive comparison function for `_.isEqual`.\r\nfunction eq(a, b, aStack, bStack) {\r\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n  // `null` or `undefined` only equal to itself (strict comparison).\r\n  if (a == null || b == null) return false;\r\n  // `NaN`s are equivalent, but non-reflexive.\r\n  if (a !== a) return b !== b;\r\n  // Exhaust primitive checks\r\n  var type = typeof a;\r\n  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n  return deepEq(a, b, aStack, bStack);\r\n}\r\n\r\n// Internal recursive comparison function for `_.isEqual`.\r\nfunction deepEq(a, b, aStack, bStack) {\r\n  // Unwrap any wrapped objects.\r\n  if (a instanceof _) a = a._wrapped;\r\n  if (b instanceof _) b = b._wrapped;\r\n  // Compare `[[Class]]` names.\r\n  var className = toString.call(a);\r\n  if (className !== toString.call(b)) return false;\r\n  // Work around a bug in IE 10 - Edge 13.\r\n  if (hasStringTagBug && className == '[object Object]' && isDataView(a)) {\r\n    if (!isDataView(b)) return false;\r\n    className = tagDataView;\r\n  }\r\n  switch (className) {\r\n    // These types are compared by value.\r\n    case '[object RegExp]':\r\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n    case '[object String]':\r\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n      // equivalent to `new String(\"5\")`.\r\n      return '' + a === '' + b;\r\n    case '[object Number]':\r\n      // `NaN`s are equivalent, but non-reflexive.\r\n      // Object(NaN) is equivalent to NaN.\r\n      if (+a !== +a) return +b !== +b;\r\n      // An `egal` comparison is performed for other numeric values.\r\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n    case '[object Date]':\r\n    case '[object Boolean]':\r\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n      // millisecond representations. Note that invalid dates with millisecond representations\r\n      // of `NaN` are not equivalent.\r\n      return +a === +b;\r\n    case '[object Symbol]':\r\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n    case '[object ArrayBuffer]':\r\n    case tagDataView:\r\n      // Coerce to typed array so we can fall through.\r\n      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);\r\n  }\r\n\r\n  var areArrays = className === '[object Array]';\r\n  if (!areArrays && isTypedArray(a)) {\r\n      var byteLength = getByteLength(a);\r\n      if (byteLength !== getByteLength(b)) return false;\r\n      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\r\n      areArrays = true;\r\n  }\r\n  if (!areArrays) {\r\n    if (typeof a != 'object' || typeof b != 'object') return false;\r\n\r\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n    // from different frames are.\r\n    var aCtor = a.constructor, bCtor = b.constructor;\r\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                             isFunction(bCtor) && bCtor instanceof bCtor)\r\n                        && ('constructor' in a && 'constructor' in b)) {\r\n      return false;\r\n    }\r\n  }\r\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n  // Initializing stack of traversed objects.\r\n  // It's done here since we only need them for objects and arrays comparison.\r\n  aStack = aStack || [];\r\n  bStack = bStack || [];\r\n  var length = aStack.length;\r\n  while (length--) {\r\n    // Linear search. Performance is inversely proportional to the number of\r\n    // unique nested structures.\r\n    if (aStack[length] === a) return bStack[length] === b;\r\n  }\r\n\r\n  // Add the first object to the stack of traversed objects.\r\n  aStack.push(a);\r\n  bStack.push(b);\r\n\r\n  // Recursively compare objects and arrays.\r\n  if (areArrays) {\r\n    // Compare array lengths to determine if a deep comparison is necessary.\r\n    length = a.length;\r\n    if (length !== b.length) return false;\r\n    // Deep compare the contents, ignoring non-numeric properties.\r\n    while (length--) {\r\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n    }\r\n  } else {\r\n    // Deep compare objects.\r\n    var _keys = keys(a), key;\r\n    length = _keys.length;\r\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n    if (keys(b).length !== length) return false;\r\n    while (length--) {\r\n      // Deep compare each member\r\n      key = _keys[length];\r\n      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\r\n    }\r\n  }\r\n  // Remove the first object from the stack of traversed objects.\r\n  aStack.pop();\r\n  bStack.pop();\r\n  return true;\r\n}\r\n\r\n// Perform a deep comparison to check if two objects are equal.\r\nexport default function isEqual(a, b) {\r\n  return eq(a, b);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}