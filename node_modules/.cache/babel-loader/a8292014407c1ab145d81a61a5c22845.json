{"ast":null,"code":"const {\n  Transform\n} = require('stream');\nmodule.exports = KeccakState => class Shake extends Transform {\n  constructor(rate, capacity, delimitedSuffix, options) {\n    super(options);\n    this._rate = rate;\n    this._capacity = capacity;\n    this._delimitedSuffix = delimitedSuffix;\n    this._options = options;\n    this._state = new KeccakState();\n    this._state.initialize(rate, capacity);\n    this._finalized = false;\n  }\n  _transform(chunk, encoding, callback) {\n    let error = null;\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  }\n  _flush() {}\n  _read(size) {\n    this.push(this.squeeze(size));\n  }\n  update(data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n    if (this._finalized) throw new Error('Squeeze already called');\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n    this._state.absorb(data);\n    return this;\n  }\n  squeeze(dataByteLength, encoding) {\n    if (!this._finalized) {\n      this._finalized = true;\n      this._state.absorbLastFewBits(this._delimitedSuffix);\n    }\n    let data = this._state.squeeze(dataByteLength);\n    if (encoding !== undefined) data = data.toString(encoding);\n    return data;\n  }\n  _resetState() {\n    this._state.initialize(this._rate, this._capacity);\n    return this;\n  }\n  _clone() {\n    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);\n    this._state.copy(clone._state);\n    clone._finalized = this._finalized;\n    return clone;\n  }\n};","map":{"version":3,"names":["Transform","require","module","exports","KeccakState","Shake","constructor","rate","capacity","delimitedSuffix","options","_rate","_capacity","_delimitedSuffix","_options","_state","initialize","_finalized","_transform","chunk","encoding","callback","error","update","err","_flush","_read","size","push","squeeze","data","Buffer","isBuffer","TypeError","Error","from","absorb","dataByteLength","absorbLastFewBits","undefined","toString","_resetState","_clone","clone","copy"],"sources":["F:/Farmers_Marketplace1/node_modules/keccak/lib/api/shake.js"],"sourcesContent":["const { Transform } = require('stream')\r\n\r\nmodule.exports = (KeccakState) => class Shake extends Transform {\r\n  constructor (rate, capacity, delimitedSuffix, options) {\r\n    super(options)\r\n\r\n    this._rate = rate\r\n    this._capacity = capacity\r\n    this._delimitedSuffix = delimitedSuffix\r\n    this._options = options\r\n\r\n    this._state = new KeccakState()\r\n    this._state.initialize(rate, capacity)\r\n    this._finalized = false\r\n  }\r\n\r\n  _transform (chunk, encoding, callback) {\r\n    let error = null\r\n    try {\r\n      this.update(chunk, encoding)\r\n    } catch (err) {\r\n      error = err\r\n    }\r\n\r\n    callback(error)\r\n  }\r\n\r\n  _flush () {}\r\n\r\n  _read (size) {\r\n    this.push(this.squeeze(size))\r\n  }\r\n\r\n  update (data, encoding) {\r\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\r\n    if (this._finalized) throw new Error('Squeeze already called')\r\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\r\n\r\n    this._state.absorb(data)\r\n\r\n    return this\r\n  }\r\n\r\n  squeeze (dataByteLength, encoding) {\r\n    if (!this._finalized) {\r\n      this._finalized = true\r\n      this._state.absorbLastFewBits(this._delimitedSuffix)\r\n    }\r\n\r\n    let data = this._state.squeeze(dataByteLength)\r\n    if (encoding !== undefined) data = data.toString(encoding)\r\n\r\n    return data\r\n  }\r\n\r\n  _resetState () {\r\n    this._state.initialize(this._rate, this._capacity)\r\n    return this\r\n  }\r\n\r\n  _clone () {\r\n    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)\r\n    this._state.copy(clone._state)\r\n    clone._finalized = this._finalized\r\n\r\n    return clone\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEvCC,MAAM,CAACC,OAAO,GAAIC,WAAW,IAAK,MAAMC,KAAK,SAASL,SAAS,CAAC;EAC9DM,WAAWA,CAAEC,IAAI,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,OAAO,EAAE;IACrD,KAAK,CAACA,OAAO,CAAC;IAEd,IAAI,CAACC,KAAK,GAAGJ,IAAI;IACjB,IAAI,CAACK,SAAS,GAAGJ,QAAQ;IACzB,IAAI,CAACK,gBAAgB,GAAGJ,eAAe;IACvC,IAAI,CAACK,QAAQ,GAAGJ,OAAO;IAEvB,IAAI,CAACK,MAAM,GAAG,IAAIX,WAAW,CAAC,CAAC;IAC/B,IAAI,CAACW,MAAM,CAACC,UAAU,CAACT,IAAI,EAAEC,QAAQ,CAAC;IACtC,IAAI,CAACS,UAAU,GAAG,KAAK;EACzB;EAEAC,UAAUA,CAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACrC,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI;MACF,IAAI,CAACC,MAAM,CAACJ,KAAK,EAAEC,QAAQ,CAAC;IAC9B,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZF,KAAK,GAAGE,GAAG;IACb;IAEAH,QAAQ,CAACC,KAAK,CAAC;EACjB;EAEAG,MAAMA,CAAA,EAAI,CAAC;EAEXC,KAAKA,CAAEC,IAAI,EAAE;IACX,IAAI,CAACC,IAAI,CAAC,IAAI,CAACC,OAAO,CAACF,IAAI,CAAC,CAAC;EAC/B;EAEAJ,MAAMA,CAAEO,IAAI,EAAEV,QAAQ,EAAE;IACtB,IAAI,CAACW,MAAM,CAACC,QAAQ,CAACF,IAAI,CAAC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,MAAM,IAAIG,SAAS,CAAC,mCAAmC,CAAC;IAChH,IAAI,IAAI,CAAChB,UAAU,EAAE,MAAM,IAAIiB,KAAK,CAAC,wBAAwB,CAAC;IAC9D,IAAI,CAACH,MAAM,CAACC,QAAQ,CAACF,IAAI,CAAC,EAAEA,IAAI,GAAGC,MAAM,CAACI,IAAI,CAACL,IAAI,EAAEV,QAAQ,CAAC;IAE9D,IAAI,CAACL,MAAM,CAACqB,MAAM,CAACN,IAAI,CAAC;IAExB,OAAO,IAAI;EACb;EAEAD,OAAOA,CAAEQ,cAAc,EAAEjB,QAAQ,EAAE;IACjC,IAAI,CAAC,IAAI,CAACH,UAAU,EAAE;MACpB,IAAI,CAACA,UAAU,GAAG,IAAI;MACtB,IAAI,CAACF,MAAM,CAACuB,iBAAiB,CAAC,IAAI,CAACzB,gBAAgB,CAAC;IACtD;IAEA,IAAIiB,IAAI,GAAG,IAAI,CAACf,MAAM,CAACc,OAAO,CAACQ,cAAc,CAAC;IAC9C,IAAIjB,QAAQ,KAAKmB,SAAS,EAAET,IAAI,GAAGA,IAAI,CAACU,QAAQ,CAACpB,QAAQ,CAAC;IAE1D,OAAOU,IAAI;EACb;EAEAW,WAAWA,CAAA,EAAI;IACb,IAAI,CAAC1B,MAAM,CAACC,UAAU,CAAC,IAAI,CAACL,KAAK,EAAE,IAAI,CAACC,SAAS,CAAC;IAClD,OAAO,IAAI;EACb;EAEA8B,MAAMA,CAAA,EAAI;IACR,MAAMC,KAAK,GAAG,IAAItC,KAAK,CAAC,IAAI,CAACM,KAAK,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAACC,QAAQ,CAAC;IACzF,IAAI,CAACC,MAAM,CAAC6B,IAAI,CAACD,KAAK,CAAC5B,MAAM,CAAC;IAC9B4B,KAAK,CAAC1B,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,OAAO0B,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}