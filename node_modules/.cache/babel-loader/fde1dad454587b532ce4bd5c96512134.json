{"ast":null,"code":"'use strict';\n\nconst mh = require('multihashes');\nconst {\n  Buffer\n} = require('buffer');\nvar CIDUtil = {\n  /**\r\n   * Test if the given input is a valid CID object.\r\n   * Returns an error message if it is not.\r\n   * Returns undefined if it is a valid CID.\r\n   *\r\n   * @param {any} other\r\n   * @returns {string}\r\n   */\n  checkCIDComponents: function (other) {\n    if (other == null) {\n      return 'null values are not valid CIDs';\n    }\n    if (!(other.version === 0 || other.version === 1)) {\n      return 'Invalid version, must be a number equal to 1 or 0';\n    }\n    if (typeof other.codec !== 'string') {\n      return 'codec must be string';\n    }\n    if (other.version === 0) {\n      if (other.codec !== 'dag-pb') {\n        return \"codec must be 'dag-pb' for CIDv0\";\n      }\n      if (other.multibaseName !== 'base58btc') {\n        return \"multibaseName must be 'base58btc' for CIDv0\";\n      }\n    }\n    if (!Buffer.isBuffer(other.multihash)) {\n      return 'multihash must be a Buffer';\n    }\n    try {\n      mh.validate(other.multihash);\n    } catch (err) {\n      let errorMsg = err.message;\n      if (!errorMsg) {\n        // Just in case mh.validate() throws an error with empty error message\n        errorMsg = 'Multihash validation failed';\n      }\n      return errorMsg;\n    }\n  }\n};\nmodule.exports = CIDUtil;","map":{"version":3,"names":["mh","require","Buffer","CIDUtil","checkCIDComponents","other","version","codec","multibaseName","isBuffer","multihash","validate","err","errorMsg","message","module","exports"],"sources":["F:/Farmers_Marketplace1/node_modules/cids/src/cid-util.js"],"sourcesContent":["'use strict'\r\n\r\nconst mh = require('multihashes')\r\nconst { Buffer } = require('buffer')\r\nvar CIDUtil = {\r\n  /**\r\n   * Test if the given input is a valid CID object.\r\n   * Returns an error message if it is not.\r\n   * Returns undefined if it is a valid CID.\r\n   *\r\n   * @param {any} other\r\n   * @returns {string}\r\n   */\r\n  checkCIDComponents: function (other) {\r\n    if (other == null) {\r\n      return 'null values are not valid CIDs'\r\n    }\r\n\r\n    if (!(other.version === 0 || other.version === 1)) {\r\n      return 'Invalid version, must be a number equal to 1 or 0'\r\n    }\r\n\r\n    if (typeof other.codec !== 'string') {\r\n      return 'codec must be string'\r\n    }\r\n\r\n    if (other.version === 0) {\r\n      if (other.codec !== 'dag-pb') {\r\n        return \"codec must be 'dag-pb' for CIDv0\"\r\n      }\r\n      if (other.multibaseName !== 'base58btc') {\r\n        return \"multibaseName must be 'base58btc' for CIDv0\"\r\n      }\r\n    }\r\n\r\n    if (!Buffer.isBuffer(other.multihash)) {\r\n      return 'multihash must be a Buffer'\r\n    }\r\n\r\n    try {\r\n      mh.validate(other.multihash)\r\n    } catch (err) {\r\n      let errorMsg = err.message\r\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\r\n        errorMsg = 'Multihash validation failed'\r\n      }\r\n      return errorMsg\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = CIDUtil\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAa,CAAC;AACjC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC;AACpC,IAAIE,OAAO,GAAG;EACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,SAAAA,CAAUC,KAAK,EAAE;IACnC,IAAIA,KAAK,IAAI,IAAI,EAAE;MACjB,OAAO,gCAAgC;IACzC;IAEA,IAAI,EAAEA,KAAK,CAACC,OAAO,KAAK,CAAC,IAAID,KAAK,CAACC,OAAO,KAAK,CAAC,CAAC,EAAE;MACjD,OAAO,mDAAmD;IAC5D;IAEA,IAAI,OAAOD,KAAK,CAACE,KAAK,KAAK,QAAQ,EAAE;MACnC,OAAO,sBAAsB;IAC/B;IAEA,IAAIF,KAAK,CAACC,OAAO,KAAK,CAAC,EAAE;MACvB,IAAID,KAAK,CAACE,KAAK,KAAK,QAAQ,EAAE;QAC5B,OAAO,kCAAkC;MAC3C;MACA,IAAIF,KAAK,CAACG,aAAa,KAAK,WAAW,EAAE;QACvC,OAAO,6CAA6C;MACtD;IACF;IAEA,IAAI,CAACN,MAAM,CAACO,QAAQ,CAACJ,KAAK,CAACK,SAAS,CAAC,EAAE;MACrC,OAAO,4BAA4B;IACrC;IAEA,IAAI;MACFV,EAAE,CAACW,QAAQ,CAACN,KAAK,CAACK,SAAS,CAAC;IAC9B,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAIC,QAAQ,GAAGD,GAAG,CAACE,OAAO;MAC1B,IAAI,CAACD,QAAQ,EAAE;QAAE;QACfA,QAAQ,GAAG,6BAA6B;MAC1C;MACA,OAAOA,QAAQ;IACjB;EACF;AACF,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script"}