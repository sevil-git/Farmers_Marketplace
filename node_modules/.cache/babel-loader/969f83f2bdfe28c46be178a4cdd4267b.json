{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\nutil.inherits(Writable, Stream);\nfunction nop() {}\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n  state.corked++;\n};\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n  return ret;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","map":{"version":3,"names":["pna","require","module","exports","Writable","WriteReq","chunk","encoding","cb","callback","next","CorkedRequest","state","_this","entry","finish","onCorkedFinish","asyncWrite","process","browser","indexOf","version","slice","setImmediate","nextTick","Duplex","WritableState","util","inherits","internalUtil","deprecate","Stream","Buffer","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","from","_isUint8Array","obj","isBuffer","destroyImpl","nop","options","stream","isDuplex","objectMode","writableObjectMode","hwm","highWaterMark","writableHwm","writableHighWaterMark","defaultHwm","Math","floor","finalCalled","needDrain","ending","ended","finished","destroyed","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","er","writecb","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","bufferedRequestCount","corkedRequestsFree","prototype","getBuffer","current","out","push","Object","defineProperty","get","_","realHasInstance","Symbol","hasInstance","Function","value","object","call","_writableState","writable","write","_write","writev","_writev","destroy","_destroy","final","_final","pipe","emit","Error","writeAfterEnd","validChunk","valid","TypeError","undefined","ret","isBuf","writeOrBuffer","cork","uncork","clearBuffer","setDefaultEncoding","toLowerCase","decodeChunk","enumerable","newChunk","len","last","doWrite","onwriteError","finishMaybe","onwriteStateUpdate","needFinish","afterWrite","onwriteDrain","l","buffer","Array","holder","count","allBuffers","end","endWritable","callFinal","err","prefinish","need","once","corkReq","set","_undestroy","undestroy"],"sources":["F:/Farmers_Marketplace1/node_modules/readable-stream/lib/_stream_writable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// A bit simpler than readable streams.\r\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\r\n// the drain event emission and buffering.\r\n\r\n'use strict';\r\n\r\n/*<replacement>*/\r\n\r\nvar pna = require('process-nextick-args');\r\n/*</replacement>*/\r\n\r\nmodule.exports = Writable;\r\n\r\n/* <replacement> */\r\nfunction WriteReq(chunk, encoding, cb) {\r\n  this.chunk = chunk;\r\n  this.encoding = encoding;\r\n  this.callback = cb;\r\n  this.next = null;\r\n}\r\n\r\n// It seems a linked list but it is not\r\n// there will be only 2 of these for each stream\r\nfunction CorkedRequest(state) {\r\n  var _this = this;\r\n\r\n  this.next = null;\r\n  this.entry = null;\r\n  this.finish = function () {\r\n    onCorkedFinish(_this, state);\r\n  };\r\n}\r\n/* </replacement> */\r\n\r\n/*<replacement>*/\r\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\r\n/*</replacement>*/\r\n\r\n/*<replacement>*/\r\nvar Duplex;\r\n/*</replacement>*/\r\n\r\nWritable.WritableState = WritableState;\r\n\r\n/*<replacement>*/\r\nvar util = require('core-util-is');\r\nutil.inherits = require('inherits');\r\n/*</replacement>*/\r\n\r\n/*<replacement>*/\r\nvar internalUtil = {\r\n  deprecate: require('util-deprecate')\r\n};\r\n/*</replacement>*/\r\n\r\n/*<replacement>*/\r\nvar Stream = require('./internal/streams/stream');\r\n/*</replacement>*/\r\n\r\n/*<replacement>*/\r\n\r\nvar Buffer = require('safe-buffer').Buffer;\r\nvar OurUint8Array = global.Uint8Array || function () {};\r\nfunction _uint8ArrayToBuffer(chunk) {\r\n  return Buffer.from(chunk);\r\n}\r\nfunction _isUint8Array(obj) {\r\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\r\n}\r\n\r\n/*</replacement>*/\r\n\r\nvar destroyImpl = require('./internal/streams/destroy');\r\n\r\nutil.inherits(Writable, Stream);\r\n\r\nfunction nop() {}\r\n\r\nfunction WritableState(options, stream) {\r\n  Duplex = Duplex || require('./_stream_duplex');\r\n\r\n  options = options || {};\r\n\r\n  // Duplex streams are both readable and writable, but share\r\n  // the same options object.\r\n  // However, some cases require setting options to different\r\n  // values for the readable and the writable sides of the duplex stream.\r\n  // These options can be provided separately as readableXXX and writableXXX.\r\n  var isDuplex = stream instanceof Duplex;\r\n\r\n  // object stream flag to indicate whether or not this stream\r\n  // contains buffers or objects.\r\n  this.objectMode = !!options.objectMode;\r\n\r\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\r\n\r\n  // the point at which write() starts returning false\r\n  // Note: 0 is a valid value, means that we always return false if\r\n  // the entire buffer is not flushed immediately on write()\r\n  var hwm = options.highWaterMark;\r\n  var writableHwm = options.writableHighWaterMark;\r\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\r\n\r\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\r\n\r\n  // cast to ints.\r\n  this.highWaterMark = Math.floor(this.highWaterMark);\r\n\r\n  // if _final has been called\r\n  this.finalCalled = false;\r\n\r\n  // drain event flag.\r\n  this.needDrain = false;\r\n  // at the start of calling end()\r\n  this.ending = false;\r\n  // when end() has been called, and returned\r\n  this.ended = false;\r\n  // when 'finish' is emitted\r\n  this.finished = false;\r\n\r\n  // has it been destroyed\r\n  this.destroyed = false;\r\n\r\n  // should we decode strings into buffers before passing to _write?\r\n  // this is here so that some node-core streams can optimize string\r\n  // handling at a lower level.\r\n  var noDecode = options.decodeStrings === false;\r\n  this.decodeStrings = !noDecode;\r\n\r\n  // Crypto is kind of old and crusty.  Historically, its default string\r\n  // encoding is 'binary' so we have to make this configurable.\r\n  // Everything else in the universe uses 'utf8', though.\r\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\r\n\r\n  // not an actual buffer we keep track of, but a measurement\r\n  // of how much we're waiting to get pushed to some underlying\r\n  // socket or file.\r\n  this.length = 0;\r\n\r\n  // a flag to see when we're in the middle of a write.\r\n  this.writing = false;\r\n\r\n  // when true all writes will be buffered until .uncork() call\r\n  this.corked = 0;\r\n\r\n  // a flag to be able to tell if the onwrite cb is called immediately,\r\n  // or on a later tick.  We set this to true at first, because any\r\n  // actions that shouldn't happen until \"later\" should generally also\r\n  // not happen before the first write call.\r\n  this.sync = true;\r\n\r\n  // a flag to know if we're processing previously buffered items, which\r\n  // may call the _write() callback in the same tick, so that we don't\r\n  // end up in an overlapped onwrite situation.\r\n  this.bufferProcessing = false;\r\n\r\n  // the callback that's passed to _write(chunk,cb)\r\n  this.onwrite = function (er) {\r\n    onwrite(stream, er);\r\n  };\r\n\r\n  // the callback that the user supplies to write(chunk,encoding,cb)\r\n  this.writecb = null;\r\n\r\n  // the amount that is being written when _write is called.\r\n  this.writelen = 0;\r\n\r\n  this.bufferedRequest = null;\r\n  this.lastBufferedRequest = null;\r\n\r\n  // number of pending user-supplied write callbacks\r\n  // this must be 0 before 'finish' can be emitted\r\n  this.pendingcb = 0;\r\n\r\n  // emit prefinish if the only thing we're waiting for is _write cbs\r\n  // This is relevant for synchronous Transform streams\r\n  this.prefinished = false;\r\n\r\n  // True if the error was already emitted and should not be thrown again\r\n  this.errorEmitted = false;\r\n\r\n  // count buffered requests\r\n  this.bufferedRequestCount = 0;\r\n\r\n  // allocate the first CorkedRequest, there is always\r\n  // one allocated and free to use, and we maintain at most two\r\n  this.corkedRequestsFree = new CorkedRequest(this);\r\n}\r\n\r\nWritableState.prototype.getBuffer = function getBuffer() {\r\n  var current = this.bufferedRequest;\r\n  var out = [];\r\n  while (current) {\r\n    out.push(current);\r\n    current = current.next;\r\n  }\r\n  return out;\r\n};\r\n\r\n(function () {\r\n  try {\r\n    Object.defineProperty(WritableState.prototype, 'buffer', {\r\n      get: internalUtil.deprecate(function () {\r\n        return this.getBuffer();\r\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\r\n    });\r\n  } catch (_) {}\r\n})();\r\n\r\n// Test _writableState for inheritance to account for Duplex streams,\r\n// whose prototype chain only points to Readable.\r\nvar realHasInstance;\r\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\r\n  realHasInstance = Function.prototype[Symbol.hasInstance];\r\n  Object.defineProperty(Writable, Symbol.hasInstance, {\r\n    value: function (object) {\r\n      if (realHasInstance.call(this, object)) return true;\r\n      if (this !== Writable) return false;\r\n\r\n      return object && object._writableState instanceof WritableState;\r\n    }\r\n  });\r\n} else {\r\n  realHasInstance = function (object) {\r\n    return object instanceof this;\r\n  };\r\n}\r\n\r\nfunction Writable(options) {\r\n  Duplex = Duplex || require('./_stream_duplex');\r\n\r\n  // Writable ctor is applied to Duplexes, too.\r\n  // `realHasInstance` is necessary because using plain `instanceof`\r\n  // would return false, as no `_writableState` property is attached.\r\n\r\n  // Trying to use the custom `instanceof` for Writable here will also break the\r\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\r\n  // `_writableState` that would lead to infinite recursion.\r\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\r\n    return new Writable(options);\r\n  }\r\n\r\n  this._writableState = new WritableState(options, this);\r\n\r\n  // legacy.\r\n  this.writable = true;\r\n\r\n  if (options) {\r\n    if (typeof options.write === 'function') this._write = options.write;\r\n\r\n    if (typeof options.writev === 'function') this._writev = options.writev;\r\n\r\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\r\n\r\n    if (typeof options.final === 'function') this._final = options.final;\r\n  }\r\n\r\n  Stream.call(this);\r\n}\r\n\r\n// Otherwise people can pipe Writable streams, which is just wrong.\r\nWritable.prototype.pipe = function () {\r\n  this.emit('error', new Error('Cannot pipe, not readable'));\r\n};\r\n\r\nfunction writeAfterEnd(stream, cb) {\r\n  var er = new Error('write after end');\r\n  // TODO: defer error events consistently everywhere, not just the cb\r\n  stream.emit('error', er);\r\n  pna.nextTick(cb, er);\r\n}\r\n\r\n// Checks that a user-supplied chunk is valid, especially for the particular\r\n// mode the stream is in. Currently this means that `null` is never accepted\r\n// and undefined/non-string values are only allowed in object mode.\r\nfunction validChunk(stream, state, chunk, cb) {\r\n  var valid = true;\r\n  var er = false;\r\n\r\n  if (chunk === null) {\r\n    er = new TypeError('May not write null values to stream');\r\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\r\n    er = new TypeError('Invalid non-string/buffer chunk');\r\n  }\r\n  if (er) {\r\n    stream.emit('error', er);\r\n    pna.nextTick(cb, er);\r\n    valid = false;\r\n  }\r\n  return valid;\r\n}\r\n\r\nWritable.prototype.write = function (chunk, encoding, cb) {\r\n  var state = this._writableState;\r\n  var ret = false;\r\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\r\n\r\n  if (isBuf && !Buffer.isBuffer(chunk)) {\r\n    chunk = _uint8ArrayToBuffer(chunk);\r\n  }\r\n\r\n  if (typeof encoding === 'function') {\r\n    cb = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\r\n\r\n  if (typeof cb !== 'function') cb = nop;\r\n\r\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\r\n    state.pendingcb++;\r\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\nWritable.prototype.cork = function () {\r\n  var state = this._writableState;\r\n\r\n  state.corked++;\r\n};\r\n\r\nWritable.prototype.uncork = function () {\r\n  var state = this._writableState;\r\n\r\n  if (state.corked) {\r\n    state.corked--;\r\n\r\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\r\n  }\r\n};\r\n\r\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\r\n  // node::ParseEncoding() requires lower case.\r\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\r\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\r\n  this._writableState.defaultEncoding = encoding;\r\n  return this;\r\n};\r\n\r\nfunction decodeChunk(state, chunk, encoding) {\r\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\r\n    chunk = Buffer.from(chunk, encoding);\r\n  }\r\n  return chunk;\r\n}\r\n\r\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\r\n  // making it explicit this property is not enumerable\r\n  // because otherwise some prototype manipulation in\r\n  // userland will fail\r\n  enumerable: false,\r\n  get: function () {\r\n    return this._writableState.highWaterMark;\r\n  }\r\n});\r\n\r\n// if we're already writing something, then just put this\r\n// in the queue, and wait our turn.  Otherwise, call _write\r\n// If we return false, then we need a drain event, so set that flag.\r\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\r\n  if (!isBuf) {\r\n    var newChunk = decodeChunk(state, chunk, encoding);\r\n    if (chunk !== newChunk) {\r\n      isBuf = true;\r\n      encoding = 'buffer';\r\n      chunk = newChunk;\r\n    }\r\n  }\r\n  var len = state.objectMode ? 1 : chunk.length;\r\n\r\n  state.length += len;\r\n\r\n  var ret = state.length < state.highWaterMark;\r\n  // we must ensure that previous needDrain will not be reset to false.\r\n  if (!ret) state.needDrain = true;\r\n\r\n  if (state.writing || state.corked) {\r\n    var last = state.lastBufferedRequest;\r\n    state.lastBufferedRequest = {\r\n      chunk: chunk,\r\n      encoding: encoding,\r\n      isBuf: isBuf,\r\n      callback: cb,\r\n      next: null\r\n    };\r\n    if (last) {\r\n      last.next = state.lastBufferedRequest;\r\n    } else {\r\n      state.bufferedRequest = state.lastBufferedRequest;\r\n    }\r\n    state.bufferedRequestCount += 1;\r\n  } else {\r\n    doWrite(stream, state, false, len, chunk, encoding, cb);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\r\n  state.writelen = len;\r\n  state.writecb = cb;\r\n  state.writing = true;\r\n  state.sync = true;\r\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\r\n  state.sync = false;\r\n}\r\n\r\nfunction onwriteError(stream, state, sync, er, cb) {\r\n  --state.pendingcb;\r\n\r\n  if (sync) {\r\n    // defer the callback if we are being called synchronously\r\n    // to avoid piling up things on the stack\r\n    pna.nextTick(cb, er);\r\n    // this can emit finish, and it will always happen\r\n    // after error\r\n    pna.nextTick(finishMaybe, stream, state);\r\n    stream._writableState.errorEmitted = true;\r\n    stream.emit('error', er);\r\n  } else {\r\n    // the caller expect this to happen before if\r\n    // it is async\r\n    cb(er);\r\n    stream._writableState.errorEmitted = true;\r\n    stream.emit('error', er);\r\n    // this can emit finish, but finish must\r\n    // always follow error\r\n    finishMaybe(stream, state);\r\n  }\r\n}\r\n\r\nfunction onwriteStateUpdate(state) {\r\n  state.writing = false;\r\n  state.writecb = null;\r\n  state.length -= state.writelen;\r\n  state.writelen = 0;\r\n}\r\n\r\nfunction onwrite(stream, er) {\r\n  var state = stream._writableState;\r\n  var sync = state.sync;\r\n  var cb = state.writecb;\r\n\r\n  onwriteStateUpdate(state);\r\n\r\n  if (er) onwriteError(stream, state, sync, er, cb);else {\r\n    // Check if we're actually ready to finish, but don't emit yet\r\n    var finished = needFinish(state);\r\n\r\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\r\n      clearBuffer(stream, state);\r\n    }\r\n\r\n    if (sync) {\r\n      /*<replacement>*/\r\n      asyncWrite(afterWrite, stream, state, finished, cb);\r\n      /*</replacement>*/\r\n    } else {\r\n      afterWrite(stream, state, finished, cb);\r\n    }\r\n  }\r\n}\r\n\r\nfunction afterWrite(stream, state, finished, cb) {\r\n  if (!finished) onwriteDrain(stream, state);\r\n  state.pendingcb--;\r\n  cb();\r\n  finishMaybe(stream, state);\r\n}\r\n\r\n// Must force callback to be called on nextTick, so that we don't\r\n// emit 'drain' before the write() consumer gets the 'false' return\r\n// value, and has a chance to attach a 'drain' listener.\r\nfunction onwriteDrain(stream, state) {\r\n  if (state.length === 0 && state.needDrain) {\r\n    state.needDrain = false;\r\n    stream.emit('drain');\r\n  }\r\n}\r\n\r\n// if there's something in the buffer waiting, then process it\r\nfunction clearBuffer(stream, state) {\r\n  state.bufferProcessing = true;\r\n  var entry = state.bufferedRequest;\r\n\r\n  if (stream._writev && entry && entry.next) {\r\n    // Fast case, write everything using _writev()\r\n    var l = state.bufferedRequestCount;\r\n    var buffer = new Array(l);\r\n    var holder = state.corkedRequestsFree;\r\n    holder.entry = entry;\r\n\r\n    var count = 0;\r\n    var allBuffers = true;\r\n    while (entry) {\r\n      buffer[count] = entry;\r\n      if (!entry.isBuf) allBuffers = false;\r\n      entry = entry.next;\r\n      count += 1;\r\n    }\r\n    buffer.allBuffers = allBuffers;\r\n\r\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\r\n\r\n    // doWrite is almost always async, defer these to save a bit of time\r\n    // as the hot path ends with doWrite\r\n    state.pendingcb++;\r\n    state.lastBufferedRequest = null;\r\n    if (holder.next) {\r\n      state.corkedRequestsFree = holder.next;\r\n      holder.next = null;\r\n    } else {\r\n      state.corkedRequestsFree = new CorkedRequest(state);\r\n    }\r\n    state.bufferedRequestCount = 0;\r\n  } else {\r\n    // Slow case, write chunks one-by-one\r\n    while (entry) {\r\n      var chunk = entry.chunk;\r\n      var encoding = entry.encoding;\r\n      var cb = entry.callback;\r\n      var len = state.objectMode ? 1 : chunk.length;\r\n\r\n      doWrite(stream, state, false, len, chunk, encoding, cb);\r\n      entry = entry.next;\r\n      state.bufferedRequestCount--;\r\n      // if we didn't call the onwrite immediately, then\r\n      // it means that we need to wait until it does.\r\n      // also, that means that the chunk and cb are currently\r\n      // being processed, so move the buffer counter past them.\r\n      if (state.writing) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (entry === null) state.lastBufferedRequest = null;\r\n  }\r\n\r\n  state.bufferedRequest = entry;\r\n  state.bufferProcessing = false;\r\n}\r\n\r\nWritable.prototype._write = function (chunk, encoding, cb) {\r\n  cb(new Error('_write() is not implemented'));\r\n};\r\n\r\nWritable.prototype._writev = null;\r\n\r\nWritable.prototype.end = function (chunk, encoding, cb) {\r\n  var state = this._writableState;\r\n\r\n  if (typeof chunk === 'function') {\r\n    cb = chunk;\r\n    chunk = null;\r\n    encoding = null;\r\n  } else if (typeof encoding === 'function') {\r\n    cb = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\r\n\r\n  // .end() fully uncorks\r\n  if (state.corked) {\r\n    state.corked = 1;\r\n    this.uncork();\r\n  }\r\n\r\n  // ignore unnecessary end() calls.\r\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\r\n};\r\n\r\nfunction needFinish(state) {\r\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\r\n}\r\nfunction callFinal(stream, state) {\r\n  stream._final(function (err) {\r\n    state.pendingcb--;\r\n    if (err) {\r\n      stream.emit('error', err);\r\n    }\r\n    state.prefinished = true;\r\n    stream.emit('prefinish');\r\n    finishMaybe(stream, state);\r\n  });\r\n}\r\nfunction prefinish(stream, state) {\r\n  if (!state.prefinished && !state.finalCalled) {\r\n    if (typeof stream._final === 'function') {\r\n      state.pendingcb++;\r\n      state.finalCalled = true;\r\n      pna.nextTick(callFinal, stream, state);\r\n    } else {\r\n      state.prefinished = true;\r\n      stream.emit('prefinish');\r\n    }\r\n  }\r\n}\r\n\r\nfunction finishMaybe(stream, state) {\r\n  var need = needFinish(state);\r\n  if (need) {\r\n    prefinish(stream, state);\r\n    if (state.pendingcb === 0) {\r\n      state.finished = true;\r\n      stream.emit('finish');\r\n    }\r\n  }\r\n  return need;\r\n}\r\n\r\nfunction endWritable(stream, state, cb) {\r\n  state.ending = true;\r\n  finishMaybe(stream, state);\r\n  if (cb) {\r\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\r\n  }\r\n  state.ended = true;\r\n  stream.writable = false;\r\n}\r\n\r\nfunction onCorkedFinish(corkReq, state, err) {\r\n  var entry = corkReq.entry;\r\n  corkReq.entry = null;\r\n  while (entry) {\r\n    var cb = entry.callback;\r\n    state.pendingcb--;\r\n    cb(err);\r\n    entry = entry.next;\r\n  }\r\n  if (state.corkedRequestsFree) {\r\n    state.corkedRequestsFree.next = corkReq;\r\n  } else {\r\n    state.corkedRequestsFree = corkReq;\r\n  }\r\n}\r\n\r\nObject.defineProperty(Writable.prototype, 'destroyed', {\r\n  get: function () {\r\n    if (this._writableState === undefined) {\r\n      return false;\r\n    }\r\n    return this._writableState.destroyed;\r\n  },\r\n  set: function (value) {\r\n    // we ignore the value if the stream\r\n    // has not been initialized yet\r\n    if (!this._writableState) {\r\n      return;\r\n    }\r\n\r\n    // backward compatibility, the user is explicitly\r\n    // managing destroyed\r\n    this._writableState.destroyed = value;\r\n  }\r\n});\r\n\r\nWritable.prototype.destroy = destroyImpl.destroy;\r\nWritable.prototype._undestroy = destroyImpl.undestroy;\r\nWritable.prototype._destroy = function (err, cb) {\r\n  this.end();\r\n  cb(err);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}